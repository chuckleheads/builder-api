// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OriginChannelPackage is an object representing the database table.
type OriginChannelPackage struct {
	ChannelID int64     `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	PackageID int64     `boil:"package_id" json:"package_id" toml:"package_id" yaml:"package_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *originChannelPackageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L originChannelPackageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginChannelPackageColumns = struct {
	ChannelID string
	PackageID string
	CreatedAt string
	UpdatedAt string
}{
	ChannelID: "channel_id",
	PackageID: "package_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var OriginChannelPackageWhere = struct {
	ChannelID whereHelperint64
	PackageID whereHelperint64
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ChannelID: whereHelperint64{field: `channel_id`},
	PackageID: whereHelperint64{field: `package_id`},
	CreatedAt: whereHelpernull_Time{field: `created_at`},
	UpdatedAt: whereHelpernull_Time{field: `updated_at`},
}

// OriginChannelPackageRels is where relationship names are stored.
var OriginChannelPackageRels = struct {
	Channel string
	Package string
}{
	Channel: "Channel",
	Package: "Package",
}

// originChannelPackageR is where relationships are stored.
type originChannelPackageR struct {
	Channel *OriginChannel
	Package *OriginPackage
}

// NewStruct creates a new relationship struct
func (*originChannelPackageR) NewStruct() *originChannelPackageR {
	return &originChannelPackageR{}
}

// originChannelPackageL is where Load methods for each relationship are stored.
type originChannelPackageL struct{}

var (
	originChannelPackageColumns               = []string{"channel_id", "package_id", "created_at", "updated_at"}
	originChannelPackageColumnsWithoutDefault = []string{"channel_id", "package_id"}
	originChannelPackageColumnsWithDefault    = []string{"created_at", "updated_at"}
	originChannelPackagePrimaryKeyColumns     = []string{"channel_id", "package_id"}
)

type (
	// OriginChannelPackageSlice is an alias for a slice of pointers to OriginChannelPackage.
	// This should generally be used opposed to []OriginChannelPackage.
	OriginChannelPackageSlice []*OriginChannelPackage
	// OriginChannelPackageHook is the signature for custom OriginChannelPackage hook methods
	OriginChannelPackageHook func(context.Context, boil.ContextExecutor, *OriginChannelPackage) error

	originChannelPackageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originChannelPackageType                 = reflect.TypeOf(&OriginChannelPackage{})
	originChannelPackageMapping              = queries.MakeStructMapping(originChannelPackageType)
	originChannelPackagePrimaryKeyMapping, _ = queries.BindMapping(originChannelPackageType, originChannelPackageMapping, originChannelPackagePrimaryKeyColumns)
	originChannelPackageInsertCacheMut       sync.RWMutex
	originChannelPackageInsertCache          = make(map[string]insertCache)
	originChannelPackageUpdateCacheMut       sync.RWMutex
	originChannelPackageUpdateCache          = make(map[string]updateCache)
	originChannelPackageUpsertCacheMut       sync.RWMutex
	originChannelPackageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originChannelPackageBeforeInsertHooks []OriginChannelPackageHook
var originChannelPackageBeforeUpdateHooks []OriginChannelPackageHook
var originChannelPackageBeforeDeleteHooks []OriginChannelPackageHook
var originChannelPackageBeforeUpsertHooks []OriginChannelPackageHook

var originChannelPackageAfterInsertHooks []OriginChannelPackageHook
var originChannelPackageAfterSelectHooks []OriginChannelPackageHook
var originChannelPackageAfterUpdateHooks []OriginChannelPackageHook
var originChannelPackageAfterDeleteHooks []OriginChannelPackageHook
var originChannelPackageAfterUpsertHooks []OriginChannelPackageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OriginChannelPackage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OriginChannelPackage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OriginChannelPackage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OriginChannelPackage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OriginChannelPackage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OriginChannelPackage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OriginChannelPackage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OriginChannelPackage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OriginChannelPackage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originChannelPackageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginChannelPackageHook registers your hook function for all future operations.
func AddOriginChannelPackageHook(hookPoint boil.HookPoint, originChannelPackageHook OriginChannelPackageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		originChannelPackageBeforeInsertHooks = append(originChannelPackageBeforeInsertHooks, originChannelPackageHook)
	case boil.BeforeUpdateHook:
		originChannelPackageBeforeUpdateHooks = append(originChannelPackageBeforeUpdateHooks, originChannelPackageHook)
	case boil.BeforeDeleteHook:
		originChannelPackageBeforeDeleteHooks = append(originChannelPackageBeforeDeleteHooks, originChannelPackageHook)
	case boil.BeforeUpsertHook:
		originChannelPackageBeforeUpsertHooks = append(originChannelPackageBeforeUpsertHooks, originChannelPackageHook)
	case boil.AfterInsertHook:
		originChannelPackageAfterInsertHooks = append(originChannelPackageAfterInsertHooks, originChannelPackageHook)
	case boil.AfterSelectHook:
		originChannelPackageAfterSelectHooks = append(originChannelPackageAfterSelectHooks, originChannelPackageHook)
	case boil.AfterUpdateHook:
		originChannelPackageAfterUpdateHooks = append(originChannelPackageAfterUpdateHooks, originChannelPackageHook)
	case boil.AfterDeleteHook:
		originChannelPackageAfterDeleteHooks = append(originChannelPackageAfterDeleteHooks, originChannelPackageHook)
	case boil.AfterUpsertHook:
		originChannelPackageAfterUpsertHooks = append(originChannelPackageAfterUpsertHooks, originChannelPackageHook)
	}
}

// One returns a single originChannelPackage record from the query.
func (q originChannelPackageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OriginChannelPackage, error) {
	o := &OriginChannelPackage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for origin_channel_packages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OriginChannelPackage records from the query.
func (q originChannelPackageQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginChannelPackageSlice, error) {
	var o []*OriginChannelPackage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OriginChannelPackage slice")
	}

	if len(originChannelPackageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OriginChannelPackage records in the query.
func (q originChannelPackageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origin_channel_packages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originChannelPackageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origin_channel_packages exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *OriginChannelPackage) Channel(mods ...qm.QueryMod) originChannelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := OriginChannels(queryMods...)
	queries.SetFrom(query.Query, "\"origin_channels\"")

	return query
}

// Package pointed to by the foreign key.
func (o *OriginChannelPackage) Package(mods ...qm.QueryMod) originPackageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PackageID),
	}

	queryMods = append(queryMods, mods...)

	query := OriginPackages(queryMods...)
	queries.SetFrom(query.Query, "\"origin_packages\"")

	return query
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originChannelPackageL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginChannelPackage interface{}, mods queries.Applicator) error {
	var slice []*OriginChannelPackage
	var object *OriginChannelPackage

	if singular {
		object = maybeOriginChannelPackage.(*OriginChannelPackage)
	} else {
		slice = *maybeOriginChannelPackage.(*[]*OriginChannelPackage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originChannelPackageR{}
		}
		args = append(args, object.ChannelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originChannelPackageR{}
			}

			for _, a := range args {
				if a == obj.ChannelID {
					continue Outer
				}
			}

			args = append(args, obj.ChannelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_channels`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OriginChannel")
	}

	var resultSlice []*OriginChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OriginChannel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origin_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_channels")
	}

	if len(originChannelPackageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &originChannelR{}
		}
		foreign.R.ChannelOriginChannelPackages = append(foreign.R.ChannelOriginChannelPackages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &originChannelR{}
				}
				foreign.R.ChannelOriginChannelPackages = append(foreign.R.ChannelOriginChannelPackages, local)
				break
			}
		}
	}

	return nil
}

// LoadPackage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originChannelPackageL) LoadPackage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginChannelPackage interface{}, mods queries.Applicator) error {
	var slice []*OriginChannelPackage
	var object *OriginChannelPackage

	if singular {
		object = maybeOriginChannelPackage.(*OriginChannelPackage)
	} else {
		slice = *maybeOriginChannelPackage.(*[]*OriginChannelPackage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originChannelPackageR{}
		}
		args = append(args, object.PackageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originChannelPackageR{}
			}

			for _, a := range args {
				if a == obj.PackageID {
					continue Outer
				}
			}

			args = append(args, obj.PackageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_packages`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OriginPackage")
	}

	var resultSlice []*OriginPackage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OriginPackage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origin_packages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_packages")
	}

	if len(originChannelPackageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Package = foreign
		if foreign.R == nil {
			foreign.R = &originPackageR{}
		}
		foreign.R.PackageOriginChannelPackages = append(foreign.R.PackageOriginChannelPackages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PackageID == foreign.ID {
				local.R.Package = foreign
				if foreign.R == nil {
					foreign.R = &originPackageR{}
				}
				foreign.R.PackageOriginChannelPackages = append(foreign.R.PackageOriginChannelPackages, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the originChannelPackage to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.ChannelOriginChannelPackages.
func (o *OriginChannelPackage) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OriginChannel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_channel_packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, originChannelPackagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChannelID, o.PackageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &originChannelPackageR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &originChannelR{
			ChannelOriginChannelPackages: OriginChannelPackageSlice{o},
		}
	} else {
		related.R.ChannelOriginChannelPackages = append(related.R.ChannelOriginChannelPackages, o)
	}

	return nil
}

// SetPackage of the originChannelPackage to the related item.
// Sets o.R.Package to related.
// Adds o to related.R.PackageOriginChannelPackages.
func (o *OriginChannelPackage) SetPackage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OriginPackage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_channel_packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"package_id"}),
		strmangle.WhereClause("\"", "\"", 2, originChannelPackagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChannelID, o.PackageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PackageID = related.ID
	if o.R == nil {
		o.R = &originChannelPackageR{
			Package: related,
		}
	} else {
		o.R.Package = related
	}

	if related.R == nil {
		related.R = &originPackageR{
			PackageOriginChannelPackages: OriginChannelPackageSlice{o},
		}
	} else {
		related.R.PackageOriginChannelPackages = append(related.R.PackageOriginChannelPackages, o)
	}

	return nil
}

// OriginChannelPackages retrieves all the records using an executor.
func OriginChannelPackages(mods ...qm.QueryMod) originChannelPackageQuery {
	mods = append(mods, qm.From("\"origin_channel_packages\""))
	return originChannelPackageQuery{NewQuery(mods...)}
}

// FindOriginChannelPackage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOriginChannelPackage(ctx context.Context, exec boil.ContextExecutor, channelID int64, packageID int64, selectCols ...string) (*OriginChannelPackage, error) {
	originChannelPackageObj := &OriginChannelPackage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origin_channel_packages\" where \"channel_id\"=$1 AND \"package_id\"=$2", sel,
	)

	q := queries.Raw(query, channelID, packageID)

	err := q.Bind(ctx, exec, originChannelPackageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from origin_channel_packages")
	}

	return originChannelPackageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OriginChannelPackage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_channel_packages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originChannelPackageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originChannelPackageInsertCacheMut.RLock()
	cache, cached := originChannelPackageInsertCache[key]
	originChannelPackageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originChannelPackageColumns,
			originChannelPackageColumnsWithDefault,
			originChannelPackageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originChannelPackageType, originChannelPackageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originChannelPackageType, originChannelPackageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origin_channel_packages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origin_channel_packages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origin_channel_packages")
	}

	if !cached {
		originChannelPackageInsertCacheMut.Lock()
		originChannelPackageInsertCache[key] = cache
		originChannelPackageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OriginChannelPackage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OriginChannelPackage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originChannelPackageUpdateCacheMut.RLock()
	cache, cached := originChannelPackageUpdateCache[key]
	originChannelPackageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originChannelPackageColumns,
			originChannelPackagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origin_channel_packages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origin_channel_packages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originChannelPackagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originChannelPackageType, originChannelPackageMapping, append(wl, originChannelPackagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origin_channel_packages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origin_channel_packages")
	}

	if !cached {
		originChannelPackageUpdateCacheMut.Lock()
		originChannelPackageUpdateCache[key] = cache
		originChannelPackageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originChannelPackageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origin_channel_packages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origin_channel_packages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginChannelPackageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originChannelPackagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origin_channel_packages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originChannelPackagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in originChannelPackage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all originChannelPackage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OriginChannelPackage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_channel_packages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originChannelPackageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originChannelPackageUpsertCacheMut.RLock()
	cache, cached := originChannelPackageUpsertCache[key]
	originChannelPackageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originChannelPackageColumns,
			originChannelPackageColumnsWithDefault,
			originChannelPackageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originChannelPackageColumns,
			originChannelPackagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origin_channel_packages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originChannelPackagePrimaryKeyColumns))
			copy(conflict, originChannelPackagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"origin_channel_packages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originChannelPackageType, originChannelPackageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originChannelPackageType, originChannelPackageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origin_channel_packages")
	}

	if !cached {
		originChannelPackageUpsertCacheMut.Lock()
		originChannelPackageUpsertCache[key] = cache
		originChannelPackageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OriginChannelPackage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OriginChannelPackage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginChannelPackage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originChannelPackagePrimaryKeyMapping)
	sql := "DELETE FROM \"origin_channel_packages\" WHERE \"channel_id\"=$1 AND \"package_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origin_channel_packages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origin_channel_packages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originChannelPackageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originChannelPackageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin_channel_packages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_channel_packages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginChannelPackageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginChannelPackage slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(originChannelPackageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originChannelPackagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"origin_channel_packages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originChannelPackagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from originChannelPackage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_channel_packages")
	}

	if len(originChannelPackageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OriginChannelPackage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOriginChannelPackage(ctx, exec, o.ChannelID, o.PackageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginChannelPackageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginChannelPackageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originChannelPackagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origin_channel_packages\".* FROM \"origin_channel_packages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originChannelPackagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginChannelPackageSlice")
	}

	*o = slice

	return nil
}

// OriginChannelPackageExists checks if the OriginChannelPackage row exists.
func OriginChannelPackageExists(ctx context.Context, exec boil.ContextExecutor, channelID int64, packageID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origin_channel_packages\" where \"channel_id\"=$1 AND \"package_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, channelID, packageID)
	}

	row := exec.QueryRowContext(ctx, sql, channelID, packageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origin_channel_packages exists")
	}

	return exists, nil
}
