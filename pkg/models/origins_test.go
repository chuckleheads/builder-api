// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrigins(t *testing.T) {
	t.Parallel()

	query := Origins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Origins().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginExists(ctx, tx, o.Name)
	if err != nil {
		t.Errorf("Unable to check if Origin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginExists to return true, but got false.")
	}
}

func testOriginsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originFound, err := FindOrigin(ctx, tx, o.Name)
	if err != nil {
		t.Error(err)
	}

	if originFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Origins().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Origins().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originOne := &Origin{}
	originTwo := &Origin{}
	if err = randomize.Struct(seed, originOne, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}
	if err = randomize.Struct(seed, originTwo, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Origins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originOne := &Origin{}
	originTwo := &Origin{}
	if err = randomize.Struct(seed, originOne, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}
	if err = randomize.Struct(seed, originTwo, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func originAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Origin) error {
	*o = Origin{}
	return nil
}

func testOriginsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Origin{}
	o := &Origin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Origin object: %s", err)
	}

	AddOriginHook(boil.BeforeInsertHook, originBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originBeforeInsertHooks = []OriginHook{}

	AddOriginHook(boil.AfterInsertHook, originAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originAfterInsertHooks = []OriginHook{}

	AddOriginHook(boil.AfterSelectHook, originAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originAfterSelectHooks = []OriginHook{}

	AddOriginHook(boil.BeforeUpdateHook, originBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originBeforeUpdateHooks = []OriginHook{}

	AddOriginHook(boil.AfterUpdateHook, originAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originAfterUpdateHooks = []OriginHook{}

	AddOriginHook(boil.BeforeDeleteHook, originBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originBeforeDeleteHooks = []OriginHook{}

	AddOriginHook(boil.AfterDeleteHook, originAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originAfterDeleteHooks = []OriginHook{}

	AddOriginHook(boil.BeforeUpsertHook, originBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originBeforeUpsertHooks = []OriginHook{}

	AddOriginHook(boil.AfterUpsertHook, originAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originAfterUpsertHooks = []OriginHook{}
}

func testOriginsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginToManyOriginAP(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c AuditPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, auditPackageDBTypes, false, auditPackageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, auditPackageDBTypes, false, auditPackageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginAP().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginAP(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginAP); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginAP = nil
	if err = a.L.LoadOriginAP(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginAP); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginAPG(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c AuditPackageGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, auditPackageGroupDBTypes, false, auditPackageGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, auditPackageGroupDBTypes, false, auditPackageGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginAPG().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginAPG(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginAPG); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginAPG = nil
	if err = a.L.LoadOriginAPG(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginAPG); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOC(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originChannelDBTypes, false, originChannelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originChannelDBTypes, false, originChannelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOC().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOC(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOC); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOC = nil
	if err = a.L.LoadOriginOC(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOC); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOI(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginInvitation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originInvitationDBTypes, false, originInvitationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originInvitationDBTypes, false, originInvitationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOI().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOI(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOI); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOI = nil
	if err = a.L.LoadOriginOI(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOI); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOM(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originMemberDBTypes, false, originMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originMemberDBTypes, false, originMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOM().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOM(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOM); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOM = nil
	if err = a.L.LoadOriginOM(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOM); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOPA(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originPackageDBTypes, false, originPackageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originPackageDBTypes, false, originPackageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOPA().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOPA(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPA); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOPA = nil
	if err = a.L.LoadOriginOPA(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPA); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOPREK(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginPrivateEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originPrivateEncryptionKeyDBTypes, false, originPrivateEncryptionKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originPrivateEncryptionKeyDBTypes, false, originPrivateEncryptionKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOPREK().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOPREK(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPREK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOPREK = nil
	if err = a.L.LoadOriginOPREK(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPREK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOPR(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginProject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOPR().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOPR(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPR); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOPR = nil
	if err = a.L.LoadOriginOPR(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPR); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOPUEK(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginPublicEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originPublicEncryptionKeyDBTypes, false, originPublicEncryptionKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originPublicEncryptionKeyDBTypes, false, originPublicEncryptionKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOPUEK().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOPUEK(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPUEK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOPUEK = nil
	if err = a.L.LoadOriginOPUEK(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPUEK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOPK(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginPublicKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originPublicKeyDBTypes, false, originPublicKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originPublicKeyDBTypes, false, originPublicKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOPK().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOPK(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOPK = nil
	if err = a.L.LoadOriginOPK(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOPK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOSK(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginSecretKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originSecretKeyDBTypes, false, originSecretKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originSecretKeyDBTypes, false, originSecretKeyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOSK().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOSK(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOSK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOSK = nil
	if err = a.L.LoadOriginOSK(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOSK); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyOriginOS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c OriginSecret

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originSecretDBTypes, false, originSecretColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originSecretDBTypes, false, originSecretColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OriginName, a.Name)
	queries.Assign(&c.OriginName, a.Name)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginOS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OriginName, b.OriginName) {
			bFound = true
		}
		if queries.Equal(v.OriginName, c.OriginName) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginSlice{&a}
	if err = a.L.LoadOriginOS(ctx, tx, false, (*[]*Origin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginOS = nil
	if err = a.L.LoadOriginOS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginOS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginToManyAddOpOriginAP(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e AuditPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuditPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, auditPackageDBTypes, false, strmangle.SetComplement(auditPackagePrimaryKeyColumns, auditPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AuditPackage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginAP(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginAP[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginAP[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginAP().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginAP(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e AuditPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuditPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, auditPackageDBTypes, false, strmangle.SetComplement(auditPackagePrimaryKeyColumns, auditPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginAP(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginAP().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginAP(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginAP().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginAP[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginAP[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginAP(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e AuditPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuditPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, auditPackageDBTypes, false, strmangle.SetComplement(auditPackagePrimaryKeyColumns, auditPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginAP(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginAP().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginAP(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginAP().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginAP) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginAP[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginAP[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginAPG(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e AuditPackageGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuditPackageGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, auditPackageGroupDBTypes, false, strmangle.SetComplement(auditPackageGroupPrimaryKeyColumns, auditPackageGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AuditPackageGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginAPG(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginAPG[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginAPG[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginAPG().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginAPG(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e AuditPackageGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuditPackageGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, auditPackageGroupDBTypes, false, strmangle.SetComplement(auditPackageGroupPrimaryKeyColumns, auditPackageGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginAPG(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginAPG().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginAPG(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginAPG().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginAPG[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginAPG[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginAPG(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e AuditPackageGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuditPackageGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, auditPackageGroupDBTypes, false, strmangle.SetComplement(auditPackageGroupPrimaryKeyColumns, auditPackageGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginAPG(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginAPG().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginAPG(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginAPG().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginAPG) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginAPG[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginAPG[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originChannelDBTypes, false, strmangle.SetComplement(originChannelPrimaryKeyColumns, originChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginChannel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOC(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOC[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOC[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOC().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originChannelDBTypes, false, strmangle.SetComplement(originChannelPrimaryKeyColumns, originChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOC(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOC().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOC(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOC().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOC[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOC[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOC(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originChannelDBTypes, false, strmangle.SetComplement(originChannelPrimaryKeyColumns, originChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOC(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOC().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOC(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOC().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOC) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOC[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOC[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOI(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginInvitation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginInvitation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originInvitationDBTypes, false, strmangle.SetComplement(originInvitationPrimaryKeyColumns, originInvitationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginInvitation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOI(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOI[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOI[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOI().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOI(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginInvitation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginInvitation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originInvitationDBTypes, false, strmangle.SetComplement(originInvitationPrimaryKeyColumns, originInvitationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOI(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOI().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOI(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOI().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOI[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOI[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOI(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginInvitation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginInvitation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originInvitationDBTypes, false, strmangle.SetComplement(originInvitationPrimaryKeyColumns, originInvitationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOI(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOI().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOI(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOI().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOI) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOI[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOI[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOM(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originMemberDBTypes, false, strmangle.SetComplement(originMemberPrimaryKeyColumns, originMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginMember{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOM(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOM[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOM[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOM().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOM(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originMemberDBTypes, false, strmangle.SetComplement(originMemberPrimaryKeyColumns, originMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOM(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOM().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOM(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOM().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOM[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOM[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOM(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originMemberDBTypes, false, strmangle.SetComplement(originMemberPrimaryKeyColumns, originMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOM(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOM().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOM(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOM().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOM) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOM[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOM[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOPA(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPackageDBTypes, false, strmangle.SetComplement(originPackagePrimaryKeyColumns, originPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginPackage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOPA(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOPA[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOPA[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOPA().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOPA(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPackageDBTypes, false, strmangle.SetComplement(originPackagePrimaryKeyColumns, originPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOPA(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPA().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOPA(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPA().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOPA[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOPA[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOPA(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPackageDBTypes, false, strmangle.SetComplement(originPackagePrimaryKeyColumns, originPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOPA(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPA().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOPA(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPA().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOPA) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOPA[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOPA[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOPREK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPrivateEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPrivateEncryptionKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPrivateEncryptionKeyDBTypes, false, strmangle.SetComplement(originPrivateEncryptionKeyPrimaryKeyColumns, originPrivateEncryptionKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginPrivateEncryptionKey{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOPREK(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOPREK[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOPREK[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOPREK().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOPREK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPrivateEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPrivateEncryptionKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPrivateEncryptionKeyDBTypes, false, strmangle.SetComplement(originPrivateEncryptionKeyPrimaryKeyColumns, originPrivateEncryptionKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOPREK(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPREK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOPREK(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPREK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOPREK[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOPREK[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOPREK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPrivateEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPrivateEncryptionKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPrivateEncryptionKeyDBTypes, false, strmangle.SetComplement(originPrivateEncryptionKeyPrimaryKeyColumns, originPrivateEncryptionKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOPREK(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPREK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOPREK(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPREK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOPREK) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOPREK[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOPREK[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOPR(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginProject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginProject{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginProject{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOPR(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOPR[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOPR[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOPR().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOPR(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginProject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginProject{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOPR(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPR().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOPR(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPR().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOPR[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOPR[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOPR(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginProject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginProject{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOPR(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPR().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOPR(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPR().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOPR) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOPR[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOPR[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOPUEK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPublicEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPublicEncryptionKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPublicEncryptionKeyDBTypes, false, strmangle.SetComplement(originPublicEncryptionKeyPrimaryKeyColumns, originPublicEncryptionKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginPublicEncryptionKey{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOPUEK(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOPUEK[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOPUEK[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOPUEK().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOPUEK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPublicEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPublicEncryptionKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPublicEncryptionKeyDBTypes, false, strmangle.SetComplement(originPublicEncryptionKeyPrimaryKeyColumns, originPublicEncryptionKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOPUEK(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPUEK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOPUEK(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPUEK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOPUEK[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOPUEK[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOPUEK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPublicEncryptionKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPublicEncryptionKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPublicEncryptionKeyDBTypes, false, strmangle.SetComplement(originPublicEncryptionKeyPrimaryKeyColumns, originPublicEncryptionKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOPUEK(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPUEK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOPUEK(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPUEK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOPUEK) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOPUEK[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOPUEK[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOPK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPublicKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPublicKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPublicKeyDBTypes, false, strmangle.SetComplement(originPublicKeyPrimaryKeyColumns, originPublicKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginPublicKey{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOPK(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOPK[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOPK[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOPK().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOPK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPublicKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPublicKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPublicKeyDBTypes, false, strmangle.SetComplement(originPublicKeyPrimaryKeyColumns, originPublicKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOPK(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOPK(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOPK[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOPK[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOPK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginPublicKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginPublicKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originPublicKeyDBTypes, false, strmangle.SetComplement(originPublicKeyPrimaryKeyColumns, originPublicKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOPK(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOPK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOPK(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOPK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOPK) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOPK[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOPK[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOSK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginSecretKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginSecretKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originSecretKeyDBTypes, false, strmangle.SetComplement(originSecretKeyPrimaryKeyColumns, originSecretKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginSecretKey{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOSK(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOSK[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOSK[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOSK().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOSK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginSecretKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginSecretKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originSecretKeyDBTypes, false, strmangle.SetComplement(originSecretKeyPrimaryKeyColumns, originSecretKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOSK(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOSK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOSK(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOSK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOSK[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOSK[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOSK(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginSecretKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginSecretKey{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originSecretKeyDBTypes, false, strmangle.SetComplement(originSecretKeyPrimaryKeyColumns, originSecretKeyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOSK(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOSK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOSK(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOSK().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOSK) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOSK[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOSK[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginToManyAddOpOriginOS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginSecret

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginSecret{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originSecretDBTypes, false, strmangle.SetComplement(originSecretPrimaryKeyColumns, originSecretColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginSecret{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginOS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Name, first.OriginName) {
			t.Error("foreign key was wrong value", a.Name, first.OriginName)
		}
		if !queries.Equal(a.Name, second.OriginName) {
			t.Error("foreign key was wrong value", a.Name, second.OriginName)
		}

		if first.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Origin != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginOS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginOS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginOS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOriginToManySetOpOriginOS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginSecret

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginSecret{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originSecretDBTypes, false, strmangle.SetComplement(originSecretPrimaryKeyColumns, originSecretColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginOS(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginOS(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Name, d.OriginName) {
		t.Error("foreign key was wrong value", a.Name, d.OriginName)
	}
	if !queries.Equal(a.Name, e.OriginName) {
		t.Error("foreign key was wrong value", a.Name, e.OriginName)
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Origin != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginOS[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginOS[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOriginToManyRemoveOpOriginOS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Origin
	var b, c, d, e OriginSecret

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginSecret{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originSecretDBTypes, false, strmangle.SetComplement(originSecretPrimaryKeyColumns, originSecretColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginOS(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginOS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginOS(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginOS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OriginName) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OriginName) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Origin != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Origin != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginOS) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginOS[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginOS[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOriginsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Origins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originDBTypes = map[string]string{`Name`: `text`, `OwnerID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DefaultPackageVisibility`: `enum.origin_package_visibility('public','private','hidden')`}
	_             = bytes.MinRead
)

func testOriginsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originColumns) == len(originPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originDBTypes, true, originPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originColumns) == len(originPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Origin{}
	if err = randomize.Struct(seed, o, originDBTypes, true, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originDBTypes, true, originPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originColumns, originPrimaryKeyColumns) {
		fields = originColumns
	} else {
		fields = strmangle.SetComplement(
			originColumns,
			originPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginsUpsert(t *testing.T) {
	t.Parallel()

	if len(originColumns) == len(originPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Origin{}
	if err = randomize.Struct(seed, &o, originDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Origin: %s", err)
	}

	count, err := Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originDBTypes, false, originPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Origin: %s", err)
	}

	count, err = Origins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
