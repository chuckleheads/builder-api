// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOriginProjects(t *testing.T) {
	t.Parallel()

	query := OriginProjects()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginProjectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginProjectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OriginProjects().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginProjectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginProjectSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginProjectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginProjectExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OriginProject exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginProjectExists to return true, but got false.")
	}
}

func testOriginProjectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originProjectFound, err := FindOriginProject(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if originProjectFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginProjectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OriginProjects().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginProjectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OriginProjects().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginProjectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originProjectOne := &OriginProject{}
	originProjectTwo := &OriginProject{}
	if err = randomize.Struct(seed, originProjectOne, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}
	if err = randomize.Struct(seed, originProjectTwo, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originProjectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originProjectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginProjects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginProjectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originProjectOne := &OriginProject{}
	originProjectTwo := &OriginProject{}
	if err = randomize.Struct(seed, originProjectOne, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}
	if err = randomize.Struct(seed, originProjectTwo, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originProjectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originProjectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originProjectBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func originProjectAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProject) error {
	*o = OriginProject{}
	return nil
}

func testOriginProjectsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OriginProject{}
	o := &OriginProject{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originProjectDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OriginProject object: %s", err)
	}

	AddOriginProjectHook(boil.BeforeInsertHook, originProjectBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originProjectBeforeInsertHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.AfterInsertHook, originProjectAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originProjectAfterInsertHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.AfterSelectHook, originProjectAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originProjectAfterSelectHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.BeforeUpdateHook, originProjectBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originProjectBeforeUpdateHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.AfterUpdateHook, originProjectAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originProjectAfterUpdateHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.BeforeDeleteHook, originProjectBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originProjectBeforeDeleteHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.AfterDeleteHook, originProjectAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originProjectAfterDeleteHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.BeforeUpsertHook, originProjectBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originProjectBeforeUpsertHooks = []OriginProjectHook{}

	AddOriginProjectHook(boil.AfterUpsertHook, originProjectAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originProjectAfterUpsertHooks = []OriginProjectHook{}
}

func testOriginProjectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginProjectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originProjectColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginProjectToManyProjectOriginProjectIntegrations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginProject
	var b, c OriginProjectIntegration

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ProjectID = a.ID
	c.ProjectID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProjectOriginProjectIntegrations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ProjectID == b.ProjectID {
			bFound = true
		}
		if v.ProjectID == c.ProjectID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginProjectSlice{&a}
	if err = a.L.LoadProjectOriginProjectIntegrations(ctx, tx, false, (*[]*OriginProject)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProjectOriginProjectIntegrations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProjectOriginProjectIntegrations = nil
	if err = a.L.LoadProjectOriginProjectIntegrations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProjectOriginProjectIntegrations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginProjectToManyAddOpProjectOriginProjectIntegrations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginProject
	var b, c, d, e OriginProjectIntegration

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginProjectIntegration{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originProjectIntegrationDBTypes, false, strmangle.SetComplement(originProjectIntegrationPrimaryKeyColumns, originProjectIntegrationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginProjectIntegration{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProjectOriginProjectIntegrations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ProjectID {
			t.Error("foreign key was wrong value", a.ID, first.ProjectID)
		}
		if a.ID != second.ProjectID {
			t.Error("foreign key was wrong value", a.ID, second.ProjectID)
		}

		if first.R.Project != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Project != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProjectOriginProjectIntegrations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProjectOriginProjectIntegrations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProjectOriginProjectIntegrations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOriginProjectToOneOriginUsingOriginName(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginProject
	var foreign Origin

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Origin, foreign.Name)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OriginName().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Name, foreign.Name) {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	slice := OriginProjectSlice{&local}
	if err = local.L.LoadOriginName(ctx, tx, false, (*[]*OriginProject)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginName == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OriginName = nil
	if err = local.L.LoadOriginName(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginName == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginProjectToOneSetOpOriginUsingOriginName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginProject
	var b, c Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Origin{&b, &c} {
		err = a.SetOriginName(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OriginName != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginOPR[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Origin, x.Name) {
			t.Error("foreign key was wrong value", a.Origin)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Origin))
		reflect.Indirect(reflect.ValueOf(&a.Origin)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Origin, x.Name) {
			t.Error("foreign key was wrong value", a.Origin, x.Name)
		}
	}
}

func testOriginProjectToOneRemoveOpOriginUsingOriginName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginProject
	var b Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOriginName(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOriginName(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OriginName().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OriginName != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Origin) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginOPR) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOriginProjectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginProjectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginProjectSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginProjectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginProjects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originProjectDBTypes = map[string]string{`ID`: `bigint`, `Origin`: `text`, `PackageName`: `text`, `Name`: `text`, `PlanPath`: `text`, `OwnerID`: `bigint`, `VCSType`: `text`, `VCSData`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `VCSInstallationID`: `bigint`, `Visibility`: `enum.origin_package_visibility('public','private','hidden')`, `AutoBuild`: `boolean`}
	_                    = bytes.MinRead
)

func testOriginProjectsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originProjectColumns) == len(originProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginProjectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originProjectColumns) == len(originProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginProject{}
	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originProjectDBTypes, true, originProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originProjectColumns, originProjectPrimaryKeyColumns) {
		fields = originProjectColumns
	} else {
		fields = strmangle.SetComplement(
			originProjectColumns,
			originProjectPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginProjectSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginProjectsUpsert(t *testing.T) {
	t.Parallel()

	if len(originProjectColumns) == len(originProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OriginProject{}
	if err = randomize.Struct(seed, &o, originProjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginProject: %s", err)
	}

	count, err := OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originProjectDBTypes, false, originProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginProject: %s", err)
	}

	count, err = OriginProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
