// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOriginProjectIntegrations(t *testing.T) {
	t.Parallel()

	query := OriginProjectIntegrations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginProjectIntegrationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginProjectIntegrationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OriginProjectIntegrations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginProjectIntegrationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginProjectIntegrationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginProjectIntegrationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginProjectIntegrationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OriginProjectIntegration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginProjectIntegrationExists to return true, but got false.")
	}
}

func testOriginProjectIntegrationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originProjectIntegrationFound, err := FindOriginProjectIntegration(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if originProjectIntegrationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginProjectIntegrationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OriginProjectIntegrations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginProjectIntegrationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OriginProjectIntegrations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginProjectIntegrationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originProjectIntegrationOne := &OriginProjectIntegration{}
	originProjectIntegrationTwo := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, originProjectIntegrationOne, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}
	if err = randomize.Struct(seed, originProjectIntegrationTwo, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originProjectIntegrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originProjectIntegrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginProjectIntegrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginProjectIntegrationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originProjectIntegrationOne := &OriginProjectIntegration{}
	originProjectIntegrationTwo := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, originProjectIntegrationOne, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}
	if err = randomize.Struct(seed, originProjectIntegrationTwo, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originProjectIntegrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originProjectIntegrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originProjectIntegrationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func originProjectIntegrationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginProjectIntegration) error {
	*o = OriginProjectIntegration{}
	return nil
}

func testOriginProjectIntegrationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OriginProjectIntegration{}
	o := &OriginProjectIntegration{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration object: %s", err)
	}

	AddOriginProjectIntegrationHook(boil.BeforeInsertHook, originProjectIntegrationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationBeforeInsertHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.AfterInsertHook, originProjectIntegrationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationAfterInsertHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.AfterSelectHook, originProjectIntegrationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationAfterSelectHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.BeforeUpdateHook, originProjectIntegrationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationBeforeUpdateHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.AfterUpdateHook, originProjectIntegrationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationAfterUpdateHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.BeforeDeleteHook, originProjectIntegrationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationBeforeDeleteHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.AfterDeleteHook, originProjectIntegrationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationAfterDeleteHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.BeforeUpsertHook, originProjectIntegrationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationBeforeUpsertHooks = []OriginProjectIntegrationHook{}

	AddOriginProjectIntegrationHook(boil.AfterUpsertHook, originProjectIntegrationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originProjectIntegrationAfterUpsertHooks = []OriginProjectIntegrationHook{}
}

func testOriginProjectIntegrationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginProjectIntegrationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originProjectIntegrationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginProjectIntegrationToOneOriginIntegrationUsingIntegration(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginProjectIntegration
	var foreign OriginIntegration

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originIntegrationDBTypes, false, originIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginIntegration struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IntegrationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Integration().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OriginProjectIntegrationSlice{&local}
	if err = local.L.LoadIntegration(ctx, tx, false, (*[]*OriginProjectIntegration)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Integration == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Integration = nil
	if err = local.L.LoadIntegration(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Integration == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginProjectIntegrationToOneOriginProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginProjectIntegration
	var foreign OriginProject

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originProjectIntegrationDBTypes, false, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originProjectDBTypes, false, originProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProject struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OriginProjectIntegrationSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*OriginProjectIntegration)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginProjectIntegrationToOneSetOpOriginIntegrationUsingIntegration(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginProjectIntegration
	var b, c OriginIntegration

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originProjectIntegrationDBTypes, false, strmangle.SetComplement(originProjectIntegrationPrimaryKeyColumns, originProjectIntegrationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originIntegrationDBTypes, false, strmangle.SetComplement(originIntegrationPrimaryKeyColumns, originIntegrationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originIntegrationDBTypes, false, strmangle.SetComplement(originIntegrationPrimaryKeyColumns, originIntegrationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OriginIntegration{&b, &c} {
		err = a.SetIntegration(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Integration != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IntegrationOriginProjectIntegrations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IntegrationID != x.ID {
			t.Error("foreign key was wrong value", a.IntegrationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IntegrationID))
		reflect.Indirect(reflect.ValueOf(&a.IntegrationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IntegrationID != x.ID {
			t.Error("foreign key was wrong value", a.IntegrationID, x.ID)
		}
	}
}
func testOriginProjectIntegrationToOneSetOpOriginProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginProjectIntegration
	var b, c OriginProject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originProjectIntegrationDBTypes, false, strmangle.SetComplement(originProjectIntegrationPrimaryKeyColumns, originProjectIntegrationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originProjectDBTypes, false, strmangle.SetComplement(originProjectPrimaryKeyColumns, originProjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OriginProject{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectOriginProjectIntegrations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}

func testOriginProjectIntegrationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginProjectIntegrationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginProjectIntegrationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginProjectIntegrationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginProjectIntegrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originProjectIntegrationDBTypes = map[string]string{`ID`: `bigint`, `Origin`: `text`, `Body`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `ProjectID`: `bigint`, `IntegrationID`: `bigint`}
	_                               = bytes.MinRead
)

func testOriginProjectIntegrationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originProjectIntegrationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originProjectIntegrationColumns) == len(originProjectIntegrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginProjectIntegrationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originProjectIntegrationColumns) == len(originProjectIntegrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginProjectIntegration{}
	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originProjectIntegrationDBTypes, true, originProjectIntegrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originProjectIntegrationColumns, originProjectIntegrationPrimaryKeyColumns) {
		fields = originProjectIntegrationColumns
	} else {
		fields = strmangle.SetComplement(
			originProjectIntegrationColumns,
			originProjectIntegrationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginProjectIntegrationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginProjectIntegrationsUpsert(t *testing.T) {
	t.Parallel()

	if len(originProjectIntegrationColumns) == len(originProjectIntegrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OriginProjectIntegration{}
	if err = randomize.Struct(seed, &o, originProjectIntegrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginProjectIntegration: %s", err)
	}

	count, err := OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originProjectIntegrationDBTypes, false, originProjectIntegrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginProjectIntegration struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginProjectIntegration: %s", err)
	}

	count, err = OriginProjectIntegrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
