// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuditJobs(t *testing.T) {
	t.Parallel()

	query := AuditJobs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuditJobsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuditJobsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuditJobs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuditJobsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuditJobSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuditJobsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuditJobExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuditJob exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuditJobExists to return true, but got false.")
	}
}

func testAuditJobsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	auditJobFound, err := FindAuditJob(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if auditJobFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuditJobsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuditJobs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuditJobsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuditJobs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuditJobsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auditJobOne := &AuditJob{}
	auditJobTwo := &AuditJob{}
	if err = randomize.Struct(seed, auditJobOne, auditJobDBTypes, false, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}
	if err = randomize.Struct(seed, auditJobTwo, auditJobDBTypes, false, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = auditJobOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = auditJobTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuditJobs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuditJobsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	auditJobOne := &AuditJob{}
	auditJobTwo := &AuditJob{}
	if err = randomize.Struct(seed, auditJobOne, auditJobDBTypes, false, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}
	if err = randomize.Struct(seed, auditJobTwo, auditJobDBTypes, false, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = auditJobOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = auditJobTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func auditJobBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func auditJobAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditJob) error {
	*o = AuditJob{}
	return nil
}

func testAuditJobsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuditJob{}
	o := &AuditJob{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, auditJobDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuditJob object: %s", err)
	}

	AddAuditJobHook(boil.BeforeInsertHook, auditJobBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	auditJobBeforeInsertHooks = []AuditJobHook{}

	AddAuditJobHook(boil.AfterInsertHook, auditJobAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	auditJobAfterInsertHooks = []AuditJobHook{}

	AddAuditJobHook(boil.AfterSelectHook, auditJobAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	auditJobAfterSelectHooks = []AuditJobHook{}

	AddAuditJobHook(boil.BeforeUpdateHook, auditJobBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	auditJobBeforeUpdateHooks = []AuditJobHook{}

	AddAuditJobHook(boil.AfterUpdateHook, auditJobAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	auditJobAfterUpdateHooks = []AuditJobHook{}

	AddAuditJobHook(boil.BeforeDeleteHook, auditJobBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	auditJobBeforeDeleteHooks = []AuditJobHook{}

	AddAuditJobHook(boil.AfterDeleteHook, auditJobAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	auditJobAfterDeleteHooks = []AuditJobHook{}

	AddAuditJobHook(boil.BeforeUpsertHook, auditJobBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	auditJobBeforeUpsertHooks = []AuditJobHook{}

	AddAuditJobHook(boil.AfterUpsertHook, auditJobAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	auditJobAfterUpsertHooks = []AuditJobHook{}
}

func testAuditJobsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuditJobsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(auditJobColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuditJobsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuditJobsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuditJobSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuditJobsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuditJobs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	auditJobDBTypes = map[string]string{`ID`: `integer`, `GroupID`: `bigint`, `Operation`: `smallint`, `Trigger`: `smallint`, `RequesterID`: `bigint`, `RequesterName`: `text`, `CreatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testAuditJobsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(auditJobPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(auditJobColumns) == len(auditJobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuditJobsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(auditJobColumns) == len(auditJobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuditJob{}
	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, auditJobDBTypes, true, auditJobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(auditJobColumns, auditJobPrimaryKeyColumns) {
		fields = auditJobColumns
	} else {
		fields = strmangle.SetComplement(
			auditJobColumns,
			auditJobPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuditJobSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuditJobsUpsert(t *testing.T) {
	t.Parallel()

	if len(auditJobColumns) == len(auditJobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuditJob{}
	if err = randomize.Struct(seed, &o, auditJobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuditJob: %s", err)
	}

	count, err := AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, auditJobDBTypes, false, auditJobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuditJob struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuditJob: %s", err)
	}

	count, err = AuditJobs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
