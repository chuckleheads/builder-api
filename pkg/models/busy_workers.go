// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BusyWorker is an object representing the database table.
type BusyWorker struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Ident       null.String `boil:"ident" json:"ident,omitempty" toml:"ident" yaml:"ident,omitempty"`
	JobID       null.Int64  `boil:"job_id" json:"job_id,omitempty" toml:"job_id" yaml:"job_id,omitempty"`
	Quarantined null.Bool   `boil:"quarantined" json:"quarantined,omitempty" toml:"quarantined" yaml:"quarantined,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Target      null.String `boil:"target" json:"target,omitempty" toml:"target" yaml:"target,omitempty"`

	R *busyWorkerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L busyWorkerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusyWorkerColumns = struct {
	ID          string
	Ident       string
	JobID       string
	Quarantined string
	CreatedAt   string
	UpdatedAt   string
	Target      string
}{
	ID:          "id",
	Ident:       "ident",
	JobID:       "job_id",
	Quarantined: "quarantined",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Target:      "target",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BusyWorkerWhere = struct {
	ID          whereHelperint
	Ident       whereHelpernull_String
	JobID       whereHelpernull_Int64
	Quarantined whereHelpernull_Bool
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	Target      whereHelpernull_String
}{
	ID:          whereHelperint{field: `id`},
	Ident:       whereHelpernull_String{field: `ident`},
	JobID:       whereHelpernull_Int64{field: `job_id`},
	Quarantined: whereHelpernull_Bool{field: `quarantined`},
	CreatedAt:   whereHelpernull_Time{field: `created_at`},
	UpdatedAt:   whereHelpernull_Time{field: `updated_at`},
	Target:      whereHelpernull_String{field: `target`},
}

// BusyWorkerRels is where relationship names are stored.
var BusyWorkerRels = struct {
}{}

// busyWorkerR is where relationships are stored.
type busyWorkerR struct {
}

// NewStruct creates a new relationship struct
func (*busyWorkerR) NewStruct() *busyWorkerR {
	return &busyWorkerR{}
}

// busyWorkerL is where Load methods for each relationship are stored.
type busyWorkerL struct{}

var (
	busyWorkerColumns               = []string{"id", "ident", "job_id", "quarantined", "created_at", "updated_at", "target"}
	busyWorkerColumnsWithoutDefault = []string{"ident", "job_id", "quarantined"}
	busyWorkerColumnsWithDefault    = []string{"id", "created_at", "updated_at", "target"}
	busyWorkerPrimaryKeyColumns     = []string{"id"}
)

type (
	// BusyWorkerSlice is an alias for a slice of pointers to BusyWorker.
	// This should generally be used opposed to []BusyWorker.
	BusyWorkerSlice []*BusyWorker
	// BusyWorkerHook is the signature for custom BusyWorker hook methods
	BusyWorkerHook func(context.Context, boil.ContextExecutor, *BusyWorker) error

	busyWorkerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	busyWorkerType                 = reflect.TypeOf(&BusyWorker{})
	busyWorkerMapping              = queries.MakeStructMapping(busyWorkerType)
	busyWorkerPrimaryKeyMapping, _ = queries.BindMapping(busyWorkerType, busyWorkerMapping, busyWorkerPrimaryKeyColumns)
	busyWorkerInsertCacheMut       sync.RWMutex
	busyWorkerInsertCache          = make(map[string]insertCache)
	busyWorkerUpdateCacheMut       sync.RWMutex
	busyWorkerUpdateCache          = make(map[string]updateCache)
	busyWorkerUpsertCacheMut       sync.RWMutex
	busyWorkerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var busyWorkerBeforeInsertHooks []BusyWorkerHook
var busyWorkerBeforeUpdateHooks []BusyWorkerHook
var busyWorkerBeforeDeleteHooks []BusyWorkerHook
var busyWorkerBeforeUpsertHooks []BusyWorkerHook

var busyWorkerAfterInsertHooks []BusyWorkerHook
var busyWorkerAfterSelectHooks []BusyWorkerHook
var busyWorkerAfterUpdateHooks []BusyWorkerHook
var busyWorkerAfterDeleteHooks []BusyWorkerHook
var busyWorkerAfterUpsertHooks []BusyWorkerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BusyWorker) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BusyWorker) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BusyWorker) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BusyWorker) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BusyWorker) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BusyWorker) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BusyWorker) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BusyWorker) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BusyWorker) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range busyWorkerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusyWorkerHook registers your hook function for all future operations.
func AddBusyWorkerHook(hookPoint boil.HookPoint, busyWorkerHook BusyWorkerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		busyWorkerBeforeInsertHooks = append(busyWorkerBeforeInsertHooks, busyWorkerHook)
	case boil.BeforeUpdateHook:
		busyWorkerBeforeUpdateHooks = append(busyWorkerBeforeUpdateHooks, busyWorkerHook)
	case boil.BeforeDeleteHook:
		busyWorkerBeforeDeleteHooks = append(busyWorkerBeforeDeleteHooks, busyWorkerHook)
	case boil.BeforeUpsertHook:
		busyWorkerBeforeUpsertHooks = append(busyWorkerBeforeUpsertHooks, busyWorkerHook)
	case boil.AfterInsertHook:
		busyWorkerAfterInsertHooks = append(busyWorkerAfterInsertHooks, busyWorkerHook)
	case boil.AfterSelectHook:
		busyWorkerAfterSelectHooks = append(busyWorkerAfterSelectHooks, busyWorkerHook)
	case boil.AfterUpdateHook:
		busyWorkerAfterUpdateHooks = append(busyWorkerAfterUpdateHooks, busyWorkerHook)
	case boil.AfterDeleteHook:
		busyWorkerAfterDeleteHooks = append(busyWorkerAfterDeleteHooks, busyWorkerHook)
	case boil.AfterUpsertHook:
		busyWorkerAfterUpsertHooks = append(busyWorkerAfterUpsertHooks, busyWorkerHook)
	}
}

// One returns a single busyWorker record from the query.
func (q busyWorkerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BusyWorker, error) {
	o := &BusyWorker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for busy_workers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BusyWorker records from the query.
func (q busyWorkerQuery) All(ctx context.Context, exec boil.ContextExecutor) (BusyWorkerSlice, error) {
	var o []*BusyWorker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BusyWorker slice")
	}

	if len(busyWorkerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BusyWorker records in the query.
func (q busyWorkerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count busy_workers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q busyWorkerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if busy_workers exists")
	}

	return count > 0, nil
}

// BusyWorkers retrieves all the records using an executor.
func BusyWorkers(mods ...qm.QueryMod) busyWorkerQuery {
	mods = append(mods, qm.From("\"busy_workers\""))
	return busyWorkerQuery{NewQuery(mods...)}
}

// FindBusyWorker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusyWorker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BusyWorker, error) {
	busyWorkerObj := &BusyWorker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"busy_workers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, busyWorkerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from busy_workers")
	}

	return busyWorkerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BusyWorker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no busy_workers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(busyWorkerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	busyWorkerInsertCacheMut.RLock()
	cache, cached := busyWorkerInsertCache[key]
	busyWorkerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			busyWorkerColumns,
			busyWorkerColumnsWithDefault,
			busyWorkerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(busyWorkerType, busyWorkerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(busyWorkerType, busyWorkerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"busy_workers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"busy_workers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into busy_workers")
	}

	if !cached {
		busyWorkerInsertCacheMut.Lock()
		busyWorkerInsertCache[key] = cache
		busyWorkerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BusyWorker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BusyWorker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	busyWorkerUpdateCacheMut.RLock()
	cache, cached := busyWorkerUpdateCache[key]
	busyWorkerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			busyWorkerColumns,
			busyWorkerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update busy_workers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"busy_workers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, busyWorkerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(busyWorkerType, busyWorkerMapping, append(wl, busyWorkerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update busy_workers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for busy_workers")
	}

	if !cached {
		busyWorkerUpdateCacheMut.Lock()
		busyWorkerUpdateCache[key] = cache
		busyWorkerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q busyWorkerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for busy_workers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for busy_workers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusyWorkerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busyWorkerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"busy_workers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, busyWorkerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in busyWorker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all busyWorker")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BusyWorker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no busy_workers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(busyWorkerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	busyWorkerUpsertCacheMut.RLock()
	cache, cached := busyWorkerUpsertCache[key]
	busyWorkerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			busyWorkerColumns,
			busyWorkerColumnsWithDefault,
			busyWorkerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			busyWorkerColumns,
			busyWorkerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert busy_workers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(busyWorkerPrimaryKeyColumns))
			copy(conflict, busyWorkerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"busy_workers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(busyWorkerType, busyWorkerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(busyWorkerType, busyWorkerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert busy_workers")
	}

	if !cached {
		busyWorkerUpsertCacheMut.Lock()
		busyWorkerUpsertCache[key] = cache
		busyWorkerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BusyWorker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BusyWorker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusyWorker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), busyWorkerPrimaryKeyMapping)
	sql := "DELETE FROM \"busy_workers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from busy_workers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for busy_workers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q busyWorkerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no busyWorkerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from busy_workers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for busy_workers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusyWorkerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BusyWorker slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(busyWorkerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busyWorkerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"busy_workers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busyWorkerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from busyWorker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for busy_workers")
	}

	if len(busyWorkerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BusyWorker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBusyWorker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusyWorkerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusyWorkerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), busyWorkerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"busy_workers\".* FROM \"busy_workers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, busyWorkerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BusyWorkerSlice")
	}

	*o = slice

	return nil
}

// BusyWorkerExists checks if the BusyWorker row exists.
func BusyWorkerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"busy_workers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if busy_workers exists")
	}

	return exists, nil
}
