// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GroupProject is an object representing the database table.
type GroupProject struct {
	ID           int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID      int64       `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	ProjectName  null.String `boil:"project_name" json:"project_name,omitempty" toml:"project_name" yaml:"project_name,omitempty"`
	ProjectIdent null.String `boil:"project_ident" json:"project_ident,omitempty" toml:"project_ident" yaml:"project_ident,omitempty"`
	ProjectState null.String `boil:"project_state" json:"project_state,omitempty" toml:"project_state" yaml:"project_state,omitempty"`
	JobID        null.Int64  `boil:"job_id" json:"job_id,omitempty" toml:"job_id" yaml:"job_id,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Target       null.String `boil:"target" json:"target,omitempty" toml:"target" yaml:"target,omitempty"`

	R *groupProjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupProjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupProjectColumns = struct {
	ID           string
	OwnerID      string
	ProjectName  string
	ProjectIdent string
	ProjectState string
	JobID        string
	CreatedAt    string
	UpdatedAt    string
	Target       string
}{
	ID:           "id",
	OwnerID:      "owner_id",
	ProjectName:  "project_name",
	ProjectIdent: "project_ident",
	ProjectState: "project_state",
	JobID:        "job_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	Target:       "target",
}

// Generated where

var GroupProjectWhere = struct {
	ID           whereHelperint64
	OwnerID      whereHelperint64
	ProjectName  whereHelpernull_String
	ProjectIdent whereHelpernull_String
	ProjectState whereHelpernull_String
	JobID        whereHelpernull_Int64
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
	Target       whereHelpernull_String
}{
	ID:           whereHelperint64{field: `id`},
	OwnerID:      whereHelperint64{field: `owner_id`},
	ProjectName:  whereHelpernull_String{field: `project_name`},
	ProjectIdent: whereHelpernull_String{field: `project_ident`},
	ProjectState: whereHelpernull_String{field: `project_state`},
	JobID:        whereHelpernull_Int64{field: `job_id`},
	CreatedAt:    whereHelpernull_Time{field: `created_at`},
	UpdatedAt:    whereHelpernull_Time{field: `updated_at`},
	Target:       whereHelpernull_String{field: `target`},
}

// GroupProjectRels is where relationship names are stored.
var GroupProjectRels = struct {
}{}

// groupProjectR is where relationships are stored.
type groupProjectR struct {
}

// NewStruct creates a new relationship struct
func (*groupProjectR) NewStruct() *groupProjectR {
	return &groupProjectR{}
}

// groupProjectL is where Load methods for each relationship are stored.
type groupProjectL struct{}

var (
	groupProjectColumns               = []string{"id", "owner_id", "project_name", "project_ident", "project_state", "job_id", "created_at", "updated_at", "target"}
	groupProjectColumnsWithoutDefault = []string{"owner_id", "project_name", "project_ident", "project_state"}
	groupProjectColumnsWithDefault    = []string{"id", "job_id", "created_at", "updated_at", "target"}
	groupProjectPrimaryKeyColumns     = []string{"id"}
)

type (
	// GroupProjectSlice is an alias for a slice of pointers to GroupProject.
	// This should generally be used opposed to []GroupProject.
	GroupProjectSlice []*GroupProject
	// GroupProjectHook is the signature for custom GroupProject hook methods
	GroupProjectHook func(context.Context, boil.ContextExecutor, *GroupProject) error

	groupProjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupProjectType                 = reflect.TypeOf(&GroupProject{})
	groupProjectMapping              = queries.MakeStructMapping(groupProjectType)
	groupProjectPrimaryKeyMapping, _ = queries.BindMapping(groupProjectType, groupProjectMapping, groupProjectPrimaryKeyColumns)
	groupProjectInsertCacheMut       sync.RWMutex
	groupProjectInsertCache          = make(map[string]insertCache)
	groupProjectUpdateCacheMut       sync.RWMutex
	groupProjectUpdateCache          = make(map[string]updateCache)
	groupProjectUpsertCacheMut       sync.RWMutex
	groupProjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupProjectBeforeInsertHooks []GroupProjectHook
var groupProjectBeforeUpdateHooks []GroupProjectHook
var groupProjectBeforeDeleteHooks []GroupProjectHook
var groupProjectBeforeUpsertHooks []GroupProjectHook

var groupProjectAfterInsertHooks []GroupProjectHook
var groupProjectAfterSelectHooks []GroupProjectHook
var groupProjectAfterUpdateHooks []GroupProjectHook
var groupProjectAfterDeleteHooks []GroupProjectHook
var groupProjectAfterUpsertHooks []GroupProjectHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupProject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupProject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupProject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupProject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupProject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupProject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupProject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupProject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupProject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupProjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupProjectHook registers your hook function for all future operations.
func AddGroupProjectHook(hookPoint boil.HookPoint, groupProjectHook GroupProjectHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		groupProjectBeforeInsertHooks = append(groupProjectBeforeInsertHooks, groupProjectHook)
	case boil.BeforeUpdateHook:
		groupProjectBeforeUpdateHooks = append(groupProjectBeforeUpdateHooks, groupProjectHook)
	case boil.BeforeDeleteHook:
		groupProjectBeforeDeleteHooks = append(groupProjectBeforeDeleteHooks, groupProjectHook)
	case boil.BeforeUpsertHook:
		groupProjectBeforeUpsertHooks = append(groupProjectBeforeUpsertHooks, groupProjectHook)
	case boil.AfterInsertHook:
		groupProjectAfterInsertHooks = append(groupProjectAfterInsertHooks, groupProjectHook)
	case boil.AfterSelectHook:
		groupProjectAfterSelectHooks = append(groupProjectAfterSelectHooks, groupProjectHook)
	case boil.AfterUpdateHook:
		groupProjectAfterUpdateHooks = append(groupProjectAfterUpdateHooks, groupProjectHook)
	case boil.AfterDeleteHook:
		groupProjectAfterDeleteHooks = append(groupProjectAfterDeleteHooks, groupProjectHook)
	case boil.AfterUpsertHook:
		groupProjectAfterUpsertHooks = append(groupProjectAfterUpsertHooks, groupProjectHook)
	}
}

// One returns a single groupProject record from the query.
func (q groupProjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupProject, error) {
	o := &GroupProject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_projects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupProject records from the query.
func (q groupProjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupProjectSlice, error) {
	var o []*GroupProject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupProject slice")
	}

	if len(groupProjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupProject records in the query.
func (q groupProjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_projects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupProjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_projects exists")
	}

	return count > 0, nil
}

// GroupProjects retrieves all the records using an executor.
func GroupProjects(mods ...qm.QueryMod) groupProjectQuery {
	mods = append(mods, qm.From("\"group_projects\""))
	return groupProjectQuery{NewQuery(mods...)}
}

// FindGroupProject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupProject(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*GroupProject, error) {
	groupProjectObj := &GroupProject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"group_projects\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupProjectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_projects")
	}

	return groupProjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupProject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_projects provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupProjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupProjectInsertCacheMut.RLock()
	cache, cached := groupProjectInsertCache[key]
	groupProjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupProjectColumns,
			groupProjectColumnsWithDefault,
			groupProjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupProjectType, groupProjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupProjectType, groupProjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"group_projects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"group_projects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_projects")
	}

	if !cached {
		groupProjectInsertCacheMut.Lock()
		groupProjectInsertCache[key] = cache
		groupProjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupProject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupProject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupProjectUpdateCacheMut.RLock()
	cache, cached := groupProjectUpdateCache[key]
	groupProjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupProjectColumns,
			groupProjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_projects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"group_projects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupProjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupProjectType, groupProjectMapping, append(wl, groupProjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_projects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_projects")
	}

	if !cached {
		groupProjectUpdateCacheMut.Lock()
		groupProjectUpdateCache[key] = cache
		groupProjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupProjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_projects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupProjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"group_projects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupProjectPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupProject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupProject")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupProject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_projects provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupProjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupProjectUpsertCacheMut.RLock()
	cache, cached := groupProjectUpsertCache[key]
	groupProjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupProjectColumns,
			groupProjectColumnsWithDefault,
			groupProjectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupProjectColumns,
			groupProjectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert group_projects, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupProjectPrimaryKeyColumns))
			copy(conflict, groupProjectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"group_projects\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupProjectType, groupProjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupProjectType, groupProjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert group_projects")
	}

	if !cached {
		groupProjectUpsertCacheMut.Lock()
		groupProjectUpsertCache[key] = cache
		groupProjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GroupProject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupProject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupProject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupProjectPrimaryKeyMapping)
	sql := "DELETE FROM \"group_projects\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_projects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupProjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupProjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_projects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_projects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupProjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupProject slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(groupProjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"group_projects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupProjectPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupProject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_projects")
	}

	if len(groupProjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupProject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupProject(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupProjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupProjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupProjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"group_projects\".* FROM \"group_projects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupProjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupProjectSlice")
	}

	*o = slice

	return nil
}

// GroupProjectExists checks if the GroupProject row exists.
func GroupProjectExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"group_projects\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_projects exists")
	}

	return exists, nil
}
