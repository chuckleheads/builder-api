// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OriginPublicKey is an object representing the database table.
type OriginPublicKey struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID    null.Int64  `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Revision   null.String `boil:"revision" json:"revision,omitempty" toml:"revision" yaml:"revision,omitempty"`
	FullName   null.String `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	Body       null.Bytes  `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	OriginName null.String `boil:"origin_name" json:"origin_name,omitempty" toml:"origin_name" yaml:"origin_name,omitempty"`

	R *originPublicKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L originPublicKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginPublicKeyColumns = struct {
	ID         string
	OwnerID    string
	Name       string
	Revision   string
	FullName   string
	Body       string
	CreatedAt  string
	UpdatedAt  string
	OriginName string
}{
	ID:         "id",
	OwnerID:    "owner_id",
	Name:       "name",
	Revision:   "revision",
	FullName:   "full_name",
	Body:       "body",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	OriginName: "origin_name",
}

// Generated where

var OriginPublicKeyWhere = struct {
	ID         whereHelperint64
	OwnerID    whereHelpernull_Int64
	Name       whereHelpernull_String
	Revision   whereHelpernull_String
	FullName   whereHelpernull_String
	Body       whereHelpernull_Bytes
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	OriginName whereHelpernull_String
}{
	ID:         whereHelperint64{field: `id`},
	OwnerID:    whereHelpernull_Int64{field: `owner_id`},
	Name:       whereHelpernull_String{field: `name`},
	Revision:   whereHelpernull_String{field: `revision`},
	FullName:   whereHelpernull_String{field: `full_name`},
	Body:       whereHelpernull_Bytes{field: `body`},
	CreatedAt:  whereHelpernull_Time{field: `created_at`},
	UpdatedAt:  whereHelpernull_Time{field: `updated_at`},
	OriginName: whereHelpernull_String{field: `origin_name`},
}

// OriginPublicKeyRels is where relationship names are stored.
var OriginPublicKeyRels = struct {
	Origin string
}{
	Origin: "Origin",
}

// originPublicKeyR is where relationships are stored.
type originPublicKeyR struct {
	Origin *Origin
}

// NewStruct creates a new relationship struct
func (*originPublicKeyR) NewStruct() *originPublicKeyR {
	return &originPublicKeyR{}
}

// originPublicKeyL is where Load methods for each relationship are stored.
type originPublicKeyL struct{}

var (
	originPublicKeyColumns               = []string{"id", "owner_id", "name", "revision", "full_name", "body", "created_at", "updated_at", "origin_name"}
	originPublicKeyColumnsWithoutDefault = []string{"owner_id", "name", "revision", "full_name", "body", "origin_name"}
	originPublicKeyColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	originPublicKeyPrimaryKeyColumns     = []string{"id"}
)

type (
	// OriginPublicKeySlice is an alias for a slice of pointers to OriginPublicKey.
	// This should generally be used opposed to []OriginPublicKey.
	OriginPublicKeySlice []*OriginPublicKey
	// OriginPublicKeyHook is the signature for custom OriginPublicKey hook methods
	OriginPublicKeyHook func(context.Context, boil.ContextExecutor, *OriginPublicKey) error

	originPublicKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originPublicKeyType                 = reflect.TypeOf(&OriginPublicKey{})
	originPublicKeyMapping              = queries.MakeStructMapping(originPublicKeyType)
	originPublicKeyPrimaryKeyMapping, _ = queries.BindMapping(originPublicKeyType, originPublicKeyMapping, originPublicKeyPrimaryKeyColumns)
	originPublicKeyInsertCacheMut       sync.RWMutex
	originPublicKeyInsertCache          = make(map[string]insertCache)
	originPublicKeyUpdateCacheMut       sync.RWMutex
	originPublicKeyUpdateCache          = make(map[string]updateCache)
	originPublicKeyUpsertCacheMut       sync.RWMutex
	originPublicKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originPublicKeyBeforeInsertHooks []OriginPublicKeyHook
var originPublicKeyBeforeUpdateHooks []OriginPublicKeyHook
var originPublicKeyBeforeDeleteHooks []OriginPublicKeyHook
var originPublicKeyBeforeUpsertHooks []OriginPublicKeyHook

var originPublicKeyAfterInsertHooks []OriginPublicKeyHook
var originPublicKeyAfterSelectHooks []OriginPublicKeyHook
var originPublicKeyAfterUpdateHooks []OriginPublicKeyHook
var originPublicKeyAfterDeleteHooks []OriginPublicKeyHook
var originPublicKeyAfterUpsertHooks []OriginPublicKeyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OriginPublicKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OriginPublicKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OriginPublicKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OriginPublicKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OriginPublicKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OriginPublicKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OriginPublicKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OriginPublicKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OriginPublicKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originPublicKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginPublicKeyHook registers your hook function for all future operations.
func AddOriginPublicKeyHook(hookPoint boil.HookPoint, originPublicKeyHook OriginPublicKeyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		originPublicKeyBeforeInsertHooks = append(originPublicKeyBeforeInsertHooks, originPublicKeyHook)
	case boil.BeforeUpdateHook:
		originPublicKeyBeforeUpdateHooks = append(originPublicKeyBeforeUpdateHooks, originPublicKeyHook)
	case boil.BeforeDeleteHook:
		originPublicKeyBeforeDeleteHooks = append(originPublicKeyBeforeDeleteHooks, originPublicKeyHook)
	case boil.BeforeUpsertHook:
		originPublicKeyBeforeUpsertHooks = append(originPublicKeyBeforeUpsertHooks, originPublicKeyHook)
	case boil.AfterInsertHook:
		originPublicKeyAfterInsertHooks = append(originPublicKeyAfterInsertHooks, originPublicKeyHook)
	case boil.AfterSelectHook:
		originPublicKeyAfterSelectHooks = append(originPublicKeyAfterSelectHooks, originPublicKeyHook)
	case boil.AfterUpdateHook:
		originPublicKeyAfterUpdateHooks = append(originPublicKeyAfterUpdateHooks, originPublicKeyHook)
	case boil.AfterDeleteHook:
		originPublicKeyAfterDeleteHooks = append(originPublicKeyAfterDeleteHooks, originPublicKeyHook)
	case boil.AfterUpsertHook:
		originPublicKeyAfterUpsertHooks = append(originPublicKeyAfterUpsertHooks, originPublicKeyHook)
	}
}

// One returns a single originPublicKey record from the query.
func (q originPublicKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OriginPublicKey, error) {
	o := &OriginPublicKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for origin_public_keys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OriginPublicKey records from the query.
func (q originPublicKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginPublicKeySlice, error) {
	var o []*OriginPublicKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OriginPublicKey slice")
	}

	if len(originPublicKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OriginPublicKey records in the query.
func (q originPublicKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origin_public_keys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originPublicKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origin_public_keys exists")
	}

	return count > 0, nil
}

// Origin pointed to by the foreign key.
func (o *OriginPublicKey) Origin(mods ...qm.QueryMod) originQuery {
	queryMods := []qm.QueryMod{
		qm.Where("name=?", o.OriginName),
	}

	queryMods = append(queryMods, mods...)

	query := Origins(queryMods...)
	queries.SetFrom(query.Query, "\"origins\"")

	return query
}

// LoadOrigin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originPublicKeyL) LoadOrigin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginPublicKey interface{}, mods queries.Applicator) error {
	var slice []*OriginPublicKey
	var object *OriginPublicKey

	if singular {
		object = maybeOriginPublicKey.(*OriginPublicKey)
	} else {
		slice = *maybeOriginPublicKey.(*[]*OriginPublicKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originPublicKeyR{}
		}
		if !queries.IsNil(object.OriginName) {
			args = append(args, object.OriginName)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originPublicKeyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OriginName) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OriginName) {
				args = append(args, obj.OriginName)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origins`), qm.WhereIn(`name in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Origin")
	}

	var resultSlice []*Origin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Origin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origins")
	}

	if len(originPublicKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Origin = foreign
		if foreign.R == nil {
			foreign.R = &originR{}
		}
		foreign.R.OriginOPK = append(foreign.R.OriginOPK, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OriginName, foreign.Name) {
				local.R.Origin = foreign
				if foreign.R == nil {
					foreign.R = &originR{}
				}
				foreign.R.OriginOPK = append(foreign.R.OriginOPK, local)
				break
			}
		}
	}

	return nil
}

// SetOrigin of the originPublicKey to the related item.
// Sets o.R.Origin to related.
// Adds o to related.R.OriginOPK.
func (o *OriginPublicKey) SetOrigin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Origin) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_public_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"origin_name"}),
		strmangle.WhereClause("\"", "\"", 2, originPublicKeyPrimaryKeyColumns),
	)
	values := []interface{}{related.Name, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OriginName, related.Name)
	if o.R == nil {
		o.R = &originPublicKeyR{
			Origin: related,
		}
	} else {
		o.R.Origin = related
	}

	if related.R == nil {
		related.R = &originR{
			OriginOPK: OriginPublicKeySlice{o},
		}
	} else {
		related.R.OriginOPK = append(related.R.OriginOPK, o)
	}

	return nil
}

// RemoveOrigin relationship.
// Sets o.R.Origin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OriginPublicKey) RemoveOrigin(ctx context.Context, exec boil.ContextExecutor, related *Origin) error {
	var err error

	queries.SetScanner(&o.OriginName, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("origin_name")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Origin = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OriginOPK {
		if queries.Equal(o.OriginName, ri.OriginName) {
			continue
		}

		ln := len(related.R.OriginOPK)
		if ln > 1 && i < ln-1 {
			related.R.OriginOPK[i] = related.R.OriginOPK[ln-1]
		}
		related.R.OriginOPK = related.R.OriginOPK[:ln-1]
		break
	}
	return nil
}

// OriginPublicKeys retrieves all the records using an executor.
func OriginPublicKeys(mods ...qm.QueryMod) originPublicKeyQuery {
	mods = append(mods, qm.From("\"origin_public_keys\""))
	return originPublicKeyQuery{NewQuery(mods...)}
}

// FindOriginPublicKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOriginPublicKey(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OriginPublicKey, error) {
	originPublicKeyObj := &OriginPublicKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origin_public_keys\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, originPublicKeyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from origin_public_keys")
	}

	return originPublicKeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OriginPublicKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_public_keys provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originPublicKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originPublicKeyInsertCacheMut.RLock()
	cache, cached := originPublicKeyInsertCache[key]
	originPublicKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originPublicKeyColumns,
			originPublicKeyColumnsWithDefault,
			originPublicKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originPublicKeyType, originPublicKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originPublicKeyType, originPublicKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origin_public_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origin_public_keys\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origin_public_keys")
	}

	if !cached {
		originPublicKeyInsertCacheMut.Lock()
		originPublicKeyInsertCache[key] = cache
		originPublicKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OriginPublicKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OriginPublicKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originPublicKeyUpdateCacheMut.RLock()
	cache, cached := originPublicKeyUpdateCache[key]
	originPublicKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originPublicKeyColumns,
			originPublicKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origin_public_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origin_public_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originPublicKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originPublicKeyType, originPublicKeyMapping, append(wl, originPublicKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origin_public_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origin_public_keys")
	}

	if !cached {
		originPublicKeyUpdateCacheMut.Lock()
		originPublicKeyUpdateCache[key] = cache
		originPublicKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originPublicKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origin_public_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origin_public_keys")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginPublicKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPublicKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origin_public_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originPublicKeyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in originPublicKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all originPublicKey")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OriginPublicKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_public_keys provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originPublicKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originPublicKeyUpsertCacheMut.RLock()
	cache, cached := originPublicKeyUpsertCache[key]
	originPublicKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originPublicKeyColumns,
			originPublicKeyColumnsWithDefault,
			originPublicKeyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originPublicKeyColumns,
			originPublicKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origin_public_keys, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originPublicKeyPrimaryKeyColumns))
			copy(conflict, originPublicKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"origin_public_keys\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originPublicKeyType, originPublicKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originPublicKeyType, originPublicKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origin_public_keys")
	}

	if !cached {
		originPublicKeyUpsertCacheMut.Lock()
		originPublicKeyUpsertCache[key] = cache
		originPublicKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OriginPublicKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OriginPublicKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginPublicKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originPublicKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"origin_public_keys\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origin_public_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origin_public_keys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originPublicKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originPublicKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin_public_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_public_keys")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginPublicKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginPublicKey slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(originPublicKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPublicKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"origin_public_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originPublicKeyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from originPublicKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_public_keys")
	}

	if len(originPublicKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OriginPublicKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOriginPublicKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginPublicKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginPublicKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPublicKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origin_public_keys\".* FROM \"origin_public_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originPublicKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginPublicKeySlice")
	}

	*o = slice

	return nil
}

// OriginPublicKeyExists checks if the OriginPublicKey row exists.
func OriginPublicKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origin_public_keys\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origin_public_keys exists")
	}

	return exists, nil
}
