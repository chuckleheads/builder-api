// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccountTokens", testAccountTokens)
	t.Run("Accounts", testAccounts)
	t.Run("AuditJobs", testAuditJobs)
	t.Run("AuditPackages", testAuditPackages)
	t.Run("AuditPackageGroups", testAuditPackageGroups)
	t.Run("BusyWorkers", testBusyWorkers)
	t.Run("GroupProjects", testGroupProjects)
	t.Run("Groups", testGroups)
	t.Run("Jobs", testJobs)
	t.Run("OriginChannelPackages", testOriginChannelPackages)
	t.Run("OriginChannels", testOriginChannels)
	t.Run("OriginIntegrations", testOriginIntegrations)
	t.Run("OriginInvitations", testOriginInvitations)
	t.Run("OriginMembers", testOriginMembers)
	t.Run("OriginPackages", testOriginPackages)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeys)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrations)
	t.Run("OriginProjects", testOriginProjects)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeys)
	t.Run("OriginPublicKeys", testOriginPublicKeys)
	t.Run("OriginSecretKeys", testOriginSecretKeys)
	t.Run("OriginSecrets", testOriginSecrets)
	t.Run("Origins", testOrigins)
}

func TestDelete(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensDelete)
	t.Run("Accounts", testAccountsDelete)
	t.Run("AuditJobs", testAuditJobsDelete)
	t.Run("AuditPackages", testAuditPackagesDelete)
	t.Run("AuditPackageGroups", testAuditPackageGroupsDelete)
	t.Run("BusyWorkers", testBusyWorkersDelete)
	t.Run("GroupProjects", testGroupProjectsDelete)
	t.Run("Groups", testGroupsDelete)
	t.Run("Jobs", testJobsDelete)
	t.Run("OriginChannelPackages", testOriginChannelPackagesDelete)
	t.Run("OriginChannels", testOriginChannelsDelete)
	t.Run("OriginIntegrations", testOriginIntegrationsDelete)
	t.Run("OriginInvitations", testOriginInvitationsDelete)
	t.Run("OriginMembers", testOriginMembersDelete)
	t.Run("OriginPackages", testOriginPackagesDelete)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysDelete)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsDelete)
	t.Run("OriginProjects", testOriginProjectsDelete)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysDelete)
	t.Run("OriginPublicKeys", testOriginPublicKeysDelete)
	t.Run("OriginSecretKeys", testOriginSecretKeysDelete)
	t.Run("OriginSecrets", testOriginSecretsDelete)
	t.Run("Origins", testOriginsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensQueryDeleteAll)
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("AuditJobs", testAuditJobsQueryDeleteAll)
	t.Run("AuditPackages", testAuditPackagesQueryDeleteAll)
	t.Run("AuditPackageGroups", testAuditPackageGroupsQueryDeleteAll)
	t.Run("BusyWorkers", testBusyWorkersQueryDeleteAll)
	t.Run("GroupProjects", testGroupProjectsQueryDeleteAll)
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("Jobs", testJobsQueryDeleteAll)
	t.Run("OriginChannelPackages", testOriginChannelPackagesQueryDeleteAll)
	t.Run("OriginChannels", testOriginChannelsQueryDeleteAll)
	t.Run("OriginIntegrations", testOriginIntegrationsQueryDeleteAll)
	t.Run("OriginInvitations", testOriginInvitationsQueryDeleteAll)
	t.Run("OriginMembers", testOriginMembersQueryDeleteAll)
	t.Run("OriginPackages", testOriginPackagesQueryDeleteAll)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysQueryDeleteAll)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsQueryDeleteAll)
	t.Run("OriginProjects", testOriginProjectsQueryDeleteAll)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysQueryDeleteAll)
	t.Run("OriginPublicKeys", testOriginPublicKeysQueryDeleteAll)
	t.Run("OriginSecretKeys", testOriginSecretKeysQueryDeleteAll)
	t.Run("OriginSecrets", testOriginSecretsQueryDeleteAll)
	t.Run("Origins", testOriginsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensSliceDeleteAll)
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("AuditJobs", testAuditJobsSliceDeleteAll)
	t.Run("AuditPackages", testAuditPackagesSliceDeleteAll)
	t.Run("AuditPackageGroups", testAuditPackageGroupsSliceDeleteAll)
	t.Run("BusyWorkers", testBusyWorkersSliceDeleteAll)
	t.Run("GroupProjects", testGroupProjectsSliceDeleteAll)
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("Jobs", testJobsSliceDeleteAll)
	t.Run("OriginChannelPackages", testOriginChannelPackagesSliceDeleteAll)
	t.Run("OriginChannels", testOriginChannelsSliceDeleteAll)
	t.Run("OriginIntegrations", testOriginIntegrationsSliceDeleteAll)
	t.Run("OriginInvitations", testOriginInvitationsSliceDeleteAll)
	t.Run("OriginMembers", testOriginMembersSliceDeleteAll)
	t.Run("OriginPackages", testOriginPackagesSliceDeleteAll)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysSliceDeleteAll)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsSliceDeleteAll)
	t.Run("OriginProjects", testOriginProjectsSliceDeleteAll)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysSliceDeleteAll)
	t.Run("OriginPublicKeys", testOriginPublicKeysSliceDeleteAll)
	t.Run("OriginSecretKeys", testOriginSecretKeysSliceDeleteAll)
	t.Run("OriginSecrets", testOriginSecretsSliceDeleteAll)
	t.Run("Origins", testOriginsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensExists)
	t.Run("Accounts", testAccountsExists)
	t.Run("AuditJobs", testAuditJobsExists)
	t.Run("AuditPackages", testAuditPackagesExists)
	t.Run("AuditPackageGroups", testAuditPackageGroupsExists)
	t.Run("BusyWorkers", testBusyWorkersExists)
	t.Run("GroupProjects", testGroupProjectsExists)
	t.Run("Groups", testGroupsExists)
	t.Run("Jobs", testJobsExists)
	t.Run("OriginChannelPackages", testOriginChannelPackagesExists)
	t.Run("OriginChannels", testOriginChannelsExists)
	t.Run("OriginIntegrations", testOriginIntegrationsExists)
	t.Run("OriginInvitations", testOriginInvitationsExists)
	t.Run("OriginMembers", testOriginMembersExists)
	t.Run("OriginPackages", testOriginPackagesExists)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysExists)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsExists)
	t.Run("OriginProjects", testOriginProjectsExists)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysExists)
	t.Run("OriginPublicKeys", testOriginPublicKeysExists)
	t.Run("OriginSecretKeys", testOriginSecretKeysExists)
	t.Run("OriginSecrets", testOriginSecretsExists)
	t.Run("Origins", testOriginsExists)
}

func TestFind(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensFind)
	t.Run("Accounts", testAccountsFind)
	t.Run("AuditJobs", testAuditJobsFind)
	t.Run("AuditPackages", testAuditPackagesFind)
	t.Run("AuditPackageGroups", testAuditPackageGroupsFind)
	t.Run("BusyWorkers", testBusyWorkersFind)
	t.Run("GroupProjects", testGroupProjectsFind)
	t.Run("Groups", testGroupsFind)
	t.Run("Jobs", testJobsFind)
	t.Run("OriginChannelPackages", testOriginChannelPackagesFind)
	t.Run("OriginChannels", testOriginChannelsFind)
	t.Run("OriginIntegrations", testOriginIntegrationsFind)
	t.Run("OriginInvitations", testOriginInvitationsFind)
	t.Run("OriginMembers", testOriginMembersFind)
	t.Run("OriginPackages", testOriginPackagesFind)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysFind)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsFind)
	t.Run("OriginProjects", testOriginProjectsFind)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysFind)
	t.Run("OriginPublicKeys", testOriginPublicKeysFind)
	t.Run("OriginSecretKeys", testOriginSecretKeysFind)
	t.Run("OriginSecrets", testOriginSecretsFind)
	t.Run("Origins", testOriginsFind)
}

func TestBind(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensBind)
	t.Run("Accounts", testAccountsBind)
	t.Run("AuditJobs", testAuditJobsBind)
	t.Run("AuditPackages", testAuditPackagesBind)
	t.Run("AuditPackageGroups", testAuditPackageGroupsBind)
	t.Run("BusyWorkers", testBusyWorkersBind)
	t.Run("GroupProjects", testGroupProjectsBind)
	t.Run("Groups", testGroupsBind)
	t.Run("Jobs", testJobsBind)
	t.Run("OriginChannelPackages", testOriginChannelPackagesBind)
	t.Run("OriginChannels", testOriginChannelsBind)
	t.Run("OriginIntegrations", testOriginIntegrationsBind)
	t.Run("OriginInvitations", testOriginInvitationsBind)
	t.Run("OriginMembers", testOriginMembersBind)
	t.Run("OriginPackages", testOriginPackagesBind)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysBind)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsBind)
	t.Run("OriginProjects", testOriginProjectsBind)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysBind)
	t.Run("OriginPublicKeys", testOriginPublicKeysBind)
	t.Run("OriginSecretKeys", testOriginSecretKeysBind)
	t.Run("OriginSecrets", testOriginSecretsBind)
	t.Run("Origins", testOriginsBind)
}

func TestOne(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensOne)
	t.Run("Accounts", testAccountsOne)
	t.Run("AuditJobs", testAuditJobsOne)
	t.Run("AuditPackages", testAuditPackagesOne)
	t.Run("AuditPackageGroups", testAuditPackageGroupsOne)
	t.Run("BusyWorkers", testBusyWorkersOne)
	t.Run("GroupProjects", testGroupProjectsOne)
	t.Run("Groups", testGroupsOne)
	t.Run("Jobs", testJobsOne)
	t.Run("OriginChannelPackages", testOriginChannelPackagesOne)
	t.Run("OriginChannels", testOriginChannelsOne)
	t.Run("OriginIntegrations", testOriginIntegrationsOne)
	t.Run("OriginInvitations", testOriginInvitationsOne)
	t.Run("OriginMembers", testOriginMembersOne)
	t.Run("OriginPackages", testOriginPackagesOne)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysOne)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsOne)
	t.Run("OriginProjects", testOriginProjectsOne)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysOne)
	t.Run("OriginPublicKeys", testOriginPublicKeysOne)
	t.Run("OriginSecretKeys", testOriginSecretKeysOne)
	t.Run("OriginSecrets", testOriginSecretsOne)
	t.Run("Origins", testOriginsOne)
}

func TestAll(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensAll)
	t.Run("Accounts", testAccountsAll)
	t.Run("AuditJobs", testAuditJobsAll)
	t.Run("AuditPackages", testAuditPackagesAll)
	t.Run("AuditPackageGroups", testAuditPackageGroupsAll)
	t.Run("BusyWorkers", testBusyWorkersAll)
	t.Run("GroupProjects", testGroupProjectsAll)
	t.Run("Groups", testGroupsAll)
	t.Run("Jobs", testJobsAll)
	t.Run("OriginChannelPackages", testOriginChannelPackagesAll)
	t.Run("OriginChannels", testOriginChannelsAll)
	t.Run("OriginIntegrations", testOriginIntegrationsAll)
	t.Run("OriginInvitations", testOriginInvitationsAll)
	t.Run("OriginMembers", testOriginMembersAll)
	t.Run("OriginPackages", testOriginPackagesAll)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysAll)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsAll)
	t.Run("OriginProjects", testOriginProjectsAll)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysAll)
	t.Run("OriginPublicKeys", testOriginPublicKeysAll)
	t.Run("OriginSecretKeys", testOriginSecretKeysAll)
	t.Run("OriginSecrets", testOriginSecretsAll)
	t.Run("Origins", testOriginsAll)
}

func TestCount(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensCount)
	t.Run("Accounts", testAccountsCount)
	t.Run("AuditJobs", testAuditJobsCount)
	t.Run("AuditPackages", testAuditPackagesCount)
	t.Run("AuditPackageGroups", testAuditPackageGroupsCount)
	t.Run("BusyWorkers", testBusyWorkersCount)
	t.Run("GroupProjects", testGroupProjectsCount)
	t.Run("Groups", testGroupsCount)
	t.Run("Jobs", testJobsCount)
	t.Run("OriginChannelPackages", testOriginChannelPackagesCount)
	t.Run("OriginChannels", testOriginChannelsCount)
	t.Run("OriginIntegrations", testOriginIntegrationsCount)
	t.Run("OriginInvitations", testOriginInvitationsCount)
	t.Run("OriginMembers", testOriginMembersCount)
	t.Run("OriginPackages", testOriginPackagesCount)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysCount)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsCount)
	t.Run("OriginProjects", testOriginProjectsCount)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysCount)
	t.Run("OriginPublicKeys", testOriginPublicKeysCount)
	t.Run("OriginSecretKeys", testOriginSecretKeysCount)
	t.Run("OriginSecrets", testOriginSecretsCount)
	t.Run("Origins", testOriginsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensHooks)
	t.Run("Accounts", testAccountsHooks)
	t.Run("AuditJobs", testAuditJobsHooks)
	t.Run("AuditPackages", testAuditPackagesHooks)
	t.Run("AuditPackageGroups", testAuditPackageGroupsHooks)
	t.Run("BusyWorkers", testBusyWorkersHooks)
	t.Run("GroupProjects", testGroupProjectsHooks)
	t.Run("Groups", testGroupsHooks)
	t.Run("Jobs", testJobsHooks)
	t.Run("OriginChannelPackages", testOriginChannelPackagesHooks)
	t.Run("OriginChannels", testOriginChannelsHooks)
	t.Run("OriginIntegrations", testOriginIntegrationsHooks)
	t.Run("OriginInvitations", testOriginInvitationsHooks)
	t.Run("OriginMembers", testOriginMembersHooks)
	t.Run("OriginPackages", testOriginPackagesHooks)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysHooks)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsHooks)
	t.Run("OriginProjects", testOriginProjectsHooks)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysHooks)
	t.Run("OriginPublicKeys", testOriginPublicKeysHooks)
	t.Run("OriginSecretKeys", testOriginSecretKeysHooks)
	t.Run("OriginSecrets", testOriginSecretsHooks)
	t.Run("Origins", testOriginsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensInsert)
	t.Run("AccountTokens", testAccountTokensInsertWhitelist)
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("AuditJobs", testAuditJobsInsert)
	t.Run("AuditJobs", testAuditJobsInsertWhitelist)
	t.Run("AuditPackages", testAuditPackagesInsert)
	t.Run("AuditPackages", testAuditPackagesInsertWhitelist)
	t.Run("AuditPackageGroups", testAuditPackageGroupsInsert)
	t.Run("AuditPackageGroups", testAuditPackageGroupsInsertWhitelist)
	t.Run("BusyWorkers", testBusyWorkersInsert)
	t.Run("BusyWorkers", testBusyWorkersInsertWhitelist)
	t.Run("GroupProjects", testGroupProjectsInsert)
	t.Run("GroupProjects", testGroupProjectsInsertWhitelist)
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("Jobs", testJobsInsert)
	t.Run("Jobs", testJobsInsertWhitelist)
	t.Run("OriginChannelPackages", testOriginChannelPackagesInsert)
	t.Run("OriginChannelPackages", testOriginChannelPackagesInsertWhitelist)
	t.Run("OriginChannels", testOriginChannelsInsert)
	t.Run("OriginChannels", testOriginChannelsInsertWhitelist)
	t.Run("OriginIntegrations", testOriginIntegrationsInsert)
	t.Run("OriginIntegrations", testOriginIntegrationsInsertWhitelist)
	t.Run("OriginInvitations", testOriginInvitationsInsert)
	t.Run("OriginInvitations", testOriginInvitationsInsertWhitelist)
	t.Run("OriginMembers", testOriginMembersInsert)
	t.Run("OriginMembers", testOriginMembersInsertWhitelist)
	t.Run("OriginPackages", testOriginPackagesInsert)
	t.Run("OriginPackages", testOriginPackagesInsertWhitelist)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysInsert)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysInsertWhitelist)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsInsert)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsInsertWhitelist)
	t.Run("OriginProjects", testOriginProjectsInsert)
	t.Run("OriginProjects", testOriginProjectsInsertWhitelist)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysInsert)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysInsertWhitelist)
	t.Run("OriginPublicKeys", testOriginPublicKeysInsert)
	t.Run("OriginPublicKeys", testOriginPublicKeysInsertWhitelist)
	t.Run("OriginSecretKeys", testOriginSecretKeysInsert)
	t.Run("OriginSecretKeys", testOriginSecretKeysInsertWhitelist)
	t.Run("OriginSecrets", testOriginSecretsInsert)
	t.Run("OriginSecrets", testOriginSecretsInsertWhitelist)
	t.Run("Origins", testOriginsInsert)
	t.Run("Origins", testOriginsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuditPackageToOriginUsingOrigin", testAuditPackageToOneOriginUsingOrigin)
	t.Run("AuditPackageGroupToOriginUsingOrigin", testAuditPackageGroupToOneOriginUsingOrigin)
	t.Run("OriginChannelPackageToOriginChannelUsingChannel", testOriginChannelPackageToOneOriginChannelUsingChannel)
	t.Run("OriginChannelPackageToOriginPackageUsingPackage", testOriginChannelPackageToOneOriginPackageUsingPackage)
	t.Run("OriginChannelToOriginUsingOrigin", testOriginChannelToOneOriginUsingOrigin)
	t.Run("OriginInvitationToOriginUsingOrigin", testOriginInvitationToOneOriginUsingOrigin)
	t.Run("OriginMemberToOriginUsingOrigin", testOriginMemberToOneOriginUsingOrigin)
	t.Run("OriginPackageToOriginUsingOrigin", testOriginPackageToOneOriginUsingOrigin)
	t.Run("OriginPrivateEncryptionKeyToOriginUsingOrigin", testOriginPrivateEncryptionKeyToOneOriginUsingOrigin)
	t.Run("OriginProjectIntegrationToOriginIntegrationUsingIntegration", testOriginProjectIntegrationToOneOriginIntegrationUsingIntegration)
	t.Run("OriginProjectIntegrationToOriginProjectUsingProject", testOriginProjectIntegrationToOneOriginProjectUsingProject)
	t.Run("OriginProjectToOriginUsingOrigin", testOriginProjectToOneOriginUsingOrigin)
	t.Run("OriginPublicEncryptionKeyToOriginUsingOrigin", testOriginPublicEncryptionKeyToOneOriginUsingOrigin)
	t.Run("OriginPublicKeyToOriginUsingOrigin", testOriginPublicKeyToOneOriginUsingOrigin)
	t.Run("OriginSecretKeyToOriginUsingOrigin", testOriginSecretKeyToOneOriginUsingOrigin)
	t.Run("OriginSecretToOriginUsingOrigin", testOriginSecretToOneOriginUsingOrigin)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OriginChannelToChannelOriginChannelPackages", testOriginChannelToManyChannelOriginChannelPackages)
	t.Run("OriginIntegrationToIntegrationOriginProjectIntegrations", testOriginIntegrationToManyIntegrationOriginProjectIntegrations)
	t.Run("OriginPackageToPackageOriginChannelPackages", testOriginPackageToManyPackageOriginChannelPackages)
	t.Run("OriginProjectToProjectOriginProjectIntegrations", testOriginProjectToManyProjectOriginProjectIntegrations)
	t.Run("OriginToOriginAP", testOriginToManyOriginAP)
	t.Run("OriginToOriginAPG", testOriginToManyOriginAPG)
	t.Run("OriginToOriginOC", testOriginToManyOriginOC)
	t.Run("OriginToOriginOI", testOriginToManyOriginOI)
	t.Run("OriginToOriginOM", testOriginToManyOriginOM)
	t.Run("OriginToOriginOPA", testOriginToManyOriginOPA)
	t.Run("OriginToOriginOPREK", testOriginToManyOriginOPREK)
	t.Run("OriginToOriginOPR", testOriginToManyOriginOPR)
	t.Run("OriginToOriginOPUEK", testOriginToManyOriginOPUEK)
	t.Run("OriginToOriginOPK", testOriginToManyOriginOPK)
	t.Run("OriginToOriginOSK", testOriginToManyOriginOSK)
	t.Run("OriginToOriginOS", testOriginToManyOriginOS)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuditPackageToOriginUsingOriginAP", testAuditPackageToOneSetOpOriginUsingOrigin)
	t.Run("AuditPackageGroupToOriginUsingOriginAPG", testAuditPackageGroupToOneSetOpOriginUsingOrigin)
	t.Run("OriginChannelPackageToOriginChannelUsingChannelOriginChannelPackages", testOriginChannelPackageToOneSetOpOriginChannelUsingChannel)
	t.Run("OriginChannelPackageToOriginPackageUsingPackageOriginChannelPackages", testOriginChannelPackageToOneSetOpOriginPackageUsingPackage)
	t.Run("OriginChannelToOriginUsingOriginOC", testOriginChannelToOneSetOpOriginUsingOrigin)
	t.Run("OriginInvitationToOriginUsingOriginOI", testOriginInvitationToOneSetOpOriginUsingOrigin)
	t.Run("OriginMemberToOriginUsingOriginOM", testOriginMemberToOneSetOpOriginUsingOrigin)
	t.Run("OriginPackageToOriginUsingOriginOPA", testOriginPackageToOneSetOpOriginUsingOrigin)
	t.Run("OriginPrivateEncryptionKeyToOriginUsingOriginOPREK", testOriginPrivateEncryptionKeyToOneSetOpOriginUsingOrigin)
	t.Run("OriginProjectIntegrationToOriginIntegrationUsingIntegrationOriginProjectIntegrations", testOriginProjectIntegrationToOneSetOpOriginIntegrationUsingIntegration)
	t.Run("OriginProjectIntegrationToOriginProjectUsingProjectOriginProjectIntegrations", testOriginProjectIntegrationToOneSetOpOriginProjectUsingProject)
	t.Run("OriginProjectToOriginUsingOriginOPR", testOriginProjectToOneSetOpOriginUsingOrigin)
	t.Run("OriginPublicEncryptionKeyToOriginUsingOriginOPUEK", testOriginPublicEncryptionKeyToOneSetOpOriginUsingOrigin)
	t.Run("OriginPublicKeyToOriginUsingOriginOPK", testOriginPublicKeyToOneSetOpOriginUsingOrigin)
	t.Run("OriginSecretKeyToOriginUsingOriginOSK", testOriginSecretKeyToOneSetOpOriginUsingOrigin)
	t.Run("OriginSecretToOriginUsingOriginOS", testOriginSecretToOneSetOpOriginUsingOrigin)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AuditPackageToOriginUsingOriginAP", testAuditPackageToOneRemoveOpOriginUsingOrigin)
	t.Run("AuditPackageGroupToOriginUsingOriginAPG", testAuditPackageGroupToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginChannelToOriginUsingOriginOC", testOriginChannelToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginInvitationToOriginUsingOriginOI", testOriginInvitationToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginMemberToOriginUsingOriginOM", testOriginMemberToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginPackageToOriginUsingOriginOPA", testOriginPackageToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginPrivateEncryptionKeyToOriginUsingOriginOPREK", testOriginPrivateEncryptionKeyToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginProjectToOriginUsingOriginOPR", testOriginProjectToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginPublicEncryptionKeyToOriginUsingOriginOPUEK", testOriginPublicEncryptionKeyToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginPublicKeyToOriginUsingOriginOPK", testOriginPublicKeyToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginSecretKeyToOriginUsingOriginOSK", testOriginSecretKeyToOneRemoveOpOriginUsingOrigin)
	t.Run("OriginSecretToOriginUsingOriginOS", testOriginSecretToOneRemoveOpOriginUsingOrigin)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OriginChannelToChannelOriginChannelPackages", testOriginChannelToManyAddOpChannelOriginChannelPackages)
	t.Run("OriginIntegrationToIntegrationOriginProjectIntegrations", testOriginIntegrationToManyAddOpIntegrationOriginProjectIntegrations)
	t.Run("OriginPackageToPackageOriginChannelPackages", testOriginPackageToManyAddOpPackageOriginChannelPackages)
	t.Run("OriginProjectToProjectOriginProjectIntegrations", testOriginProjectToManyAddOpProjectOriginProjectIntegrations)
	t.Run("OriginToOriginAP", testOriginToManyAddOpOriginAP)
	t.Run("OriginToOriginAPG", testOriginToManyAddOpOriginAPG)
	t.Run("OriginToOriginOC", testOriginToManyAddOpOriginOC)
	t.Run("OriginToOriginOI", testOriginToManyAddOpOriginOI)
	t.Run("OriginToOriginOM", testOriginToManyAddOpOriginOM)
	t.Run("OriginToOriginOPA", testOriginToManyAddOpOriginOPA)
	t.Run("OriginToOriginOPREK", testOriginToManyAddOpOriginOPREK)
	t.Run("OriginToOriginOPR", testOriginToManyAddOpOriginOPR)
	t.Run("OriginToOriginOPUEK", testOriginToManyAddOpOriginOPUEK)
	t.Run("OriginToOriginOPK", testOriginToManyAddOpOriginOPK)
	t.Run("OriginToOriginOSK", testOriginToManyAddOpOriginOSK)
	t.Run("OriginToOriginOS", testOriginToManyAddOpOriginOS)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("OriginToOriginAP", testOriginToManySetOpOriginAP)
	t.Run("OriginToOriginAPG", testOriginToManySetOpOriginAPG)
	t.Run("OriginToOriginOC", testOriginToManySetOpOriginOC)
	t.Run("OriginToOriginOI", testOriginToManySetOpOriginOI)
	t.Run("OriginToOriginOM", testOriginToManySetOpOriginOM)
	t.Run("OriginToOriginOPA", testOriginToManySetOpOriginOPA)
	t.Run("OriginToOriginOPREK", testOriginToManySetOpOriginOPREK)
	t.Run("OriginToOriginOPR", testOriginToManySetOpOriginOPR)
	t.Run("OriginToOriginOPUEK", testOriginToManySetOpOriginOPUEK)
	t.Run("OriginToOriginOPK", testOriginToManySetOpOriginOPK)
	t.Run("OriginToOriginOSK", testOriginToManySetOpOriginOSK)
	t.Run("OriginToOriginOS", testOriginToManySetOpOriginOS)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("OriginToOriginAP", testOriginToManyRemoveOpOriginAP)
	t.Run("OriginToOriginAPG", testOriginToManyRemoveOpOriginAPG)
	t.Run("OriginToOriginOC", testOriginToManyRemoveOpOriginOC)
	t.Run("OriginToOriginOI", testOriginToManyRemoveOpOriginOI)
	t.Run("OriginToOriginOM", testOriginToManyRemoveOpOriginOM)
	t.Run("OriginToOriginOPA", testOriginToManyRemoveOpOriginOPA)
	t.Run("OriginToOriginOPREK", testOriginToManyRemoveOpOriginOPREK)
	t.Run("OriginToOriginOPR", testOriginToManyRemoveOpOriginOPR)
	t.Run("OriginToOriginOPUEK", testOriginToManyRemoveOpOriginOPUEK)
	t.Run("OriginToOriginOPK", testOriginToManyRemoveOpOriginOPK)
	t.Run("OriginToOriginOSK", testOriginToManyRemoveOpOriginOSK)
	t.Run("OriginToOriginOS", testOriginToManyRemoveOpOriginOS)
}

func TestReload(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensReload)
	t.Run("Accounts", testAccountsReload)
	t.Run("AuditJobs", testAuditJobsReload)
	t.Run("AuditPackages", testAuditPackagesReload)
	t.Run("AuditPackageGroups", testAuditPackageGroupsReload)
	t.Run("BusyWorkers", testBusyWorkersReload)
	t.Run("GroupProjects", testGroupProjectsReload)
	t.Run("Groups", testGroupsReload)
	t.Run("Jobs", testJobsReload)
	t.Run("OriginChannelPackages", testOriginChannelPackagesReload)
	t.Run("OriginChannels", testOriginChannelsReload)
	t.Run("OriginIntegrations", testOriginIntegrationsReload)
	t.Run("OriginInvitations", testOriginInvitationsReload)
	t.Run("OriginMembers", testOriginMembersReload)
	t.Run("OriginPackages", testOriginPackagesReload)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysReload)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsReload)
	t.Run("OriginProjects", testOriginProjectsReload)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysReload)
	t.Run("OriginPublicKeys", testOriginPublicKeysReload)
	t.Run("OriginSecretKeys", testOriginSecretKeysReload)
	t.Run("OriginSecrets", testOriginSecretsReload)
	t.Run("Origins", testOriginsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensReloadAll)
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("AuditJobs", testAuditJobsReloadAll)
	t.Run("AuditPackages", testAuditPackagesReloadAll)
	t.Run("AuditPackageGroups", testAuditPackageGroupsReloadAll)
	t.Run("BusyWorkers", testBusyWorkersReloadAll)
	t.Run("GroupProjects", testGroupProjectsReloadAll)
	t.Run("Groups", testGroupsReloadAll)
	t.Run("Jobs", testJobsReloadAll)
	t.Run("OriginChannelPackages", testOriginChannelPackagesReloadAll)
	t.Run("OriginChannels", testOriginChannelsReloadAll)
	t.Run("OriginIntegrations", testOriginIntegrationsReloadAll)
	t.Run("OriginInvitations", testOriginInvitationsReloadAll)
	t.Run("OriginMembers", testOriginMembersReloadAll)
	t.Run("OriginPackages", testOriginPackagesReloadAll)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysReloadAll)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsReloadAll)
	t.Run("OriginProjects", testOriginProjectsReloadAll)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysReloadAll)
	t.Run("OriginPublicKeys", testOriginPublicKeysReloadAll)
	t.Run("OriginSecretKeys", testOriginSecretKeysReloadAll)
	t.Run("OriginSecrets", testOriginSecretsReloadAll)
	t.Run("Origins", testOriginsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensSelect)
	t.Run("Accounts", testAccountsSelect)
	t.Run("AuditJobs", testAuditJobsSelect)
	t.Run("AuditPackages", testAuditPackagesSelect)
	t.Run("AuditPackageGroups", testAuditPackageGroupsSelect)
	t.Run("BusyWorkers", testBusyWorkersSelect)
	t.Run("GroupProjects", testGroupProjectsSelect)
	t.Run("Groups", testGroupsSelect)
	t.Run("Jobs", testJobsSelect)
	t.Run("OriginChannelPackages", testOriginChannelPackagesSelect)
	t.Run("OriginChannels", testOriginChannelsSelect)
	t.Run("OriginIntegrations", testOriginIntegrationsSelect)
	t.Run("OriginInvitations", testOriginInvitationsSelect)
	t.Run("OriginMembers", testOriginMembersSelect)
	t.Run("OriginPackages", testOriginPackagesSelect)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysSelect)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsSelect)
	t.Run("OriginProjects", testOriginProjectsSelect)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysSelect)
	t.Run("OriginPublicKeys", testOriginPublicKeysSelect)
	t.Run("OriginSecretKeys", testOriginSecretKeysSelect)
	t.Run("OriginSecrets", testOriginSecretsSelect)
	t.Run("Origins", testOriginsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensUpdate)
	t.Run("Accounts", testAccountsUpdate)
	t.Run("AuditJobs", testAuditJobsUpdate)
	t.Run("AuditPackages", testAuditPackagesUpdate)
	t.Run("AuditPackageGroups", testAuditPackageGroupsUpdate)
	t.Run("BusyWorkers", testBusyWorkersUpdate)
	t.Run("GroupProjects", testGroupProjectsUpdate)
	t.Run("Groups", testGroupsUpdate)
	t.Run("Jobs", testJobsUpdate)
	t.Run("OriginChannelPackages", testOriginChannelPackagesUpdate)
	t.Run("OriginChannels", testOriginChannelsUpdate)
	t.Run("OriginIntegrations", testOriginIntegrationsUpdate)
	t.Run("OriginInvitations", testOriginInvitationsUpdate)
	t.Run("OriginMembers", testOriginMembersUpdate)
	t.Run("OriginPackages", testOriginPackagesUpdate)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysUpdate)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsUpdate)
	t.Run("OriginProjects", testOriginProjectsUpdate)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysUpdate)
	t.Run("OriginPublicKeys", testOriginPublicKeysUpdate)
	t.Run("OriginSecretKeys", testOriginSecretKeysUpdate)
	t.Run("OriginSecrets", testOriginSecretsUpdate)
	t.Run("Origins", testOriginsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccountTokens", testAccountTokensSliceUpdateAll)
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("AuditJobs", testAuditJobsSliceUpdateAll)
	t.Run("AuditPackages", testAuditPackagesSliceUpdateAll)
	t.Run("AuditPackageGroups", testAuditPackageGroupsSliceUpdateAll)
	t.Run("BusyWorkers", testBusyWorkersSliceUpdateAll)
	t.Run("GroupProjects", testGroupProjectsSliceUpdateAll)
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("Jobs", testJobsSliceUpdateAll)
	t.Run("OriginChannelPackages", testOriginChannelPackagesSliceUpdateAll)
	t.Run("OriginChannels", testOriginChannelsSliceUpdateAll)
	t.Run("OriginIntegrations", testOriginIntegrationsSliceUpdateAll)
	t.Run("OriginInvitations", testOriginInvitationsSliceUpdateAll)
	t.Run("OriginMembers", testOriginMembersSliceUpdateAll)
	t.Run("OriginPackages", testOriginPackagesSliceUpdateAll)
	t.Run("OriginPrivateEncryptionKeys", testOriginPrivateEncryptionKeysSliceUpdateAll)
	t.Run("OriginProjectIntegrations", testOriginProjectIntegrationsSliceUpdateAll)
	t.Run("OriginProjects", testOriginProjectsSliceUpdateAll)
	t.Run("OriginPublicEncryptionKeys", testOriginPublicEncryptionKeysSliceUpdateAll)
	t.Run("OriginPublicKeys", testOriginPublicKeysSliceUpdateAll)
	t.Run("OriginSecretKeys", testOriginSecretKeysSliceUpdateAll)
	t.Run("OriginSecrets", testOriginSecretsSliceUpdateAll)
	t.Run("Origins", testOriginsSliceUpdateAll)
}
