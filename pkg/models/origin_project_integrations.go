// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OriginProjectIntegration is an object representing the database table.
type OriginProjectIntegration struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Origin        string    `boil:"origin" json:"origin" toml:"origin" yaml:"origin"`
	Body          string    `boil:"body" json:"body" toml:"body" yaml:"body"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ProjectID     int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	IntegrationID int64     `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`

	R *originProjectIntegrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L originProjectIntegrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginProjectIntegrationColumns = struct {
	ID            string
	Origin        string
	Body          string
	CreatedAt     string
	UpdatedAt     string
	ProjectID     string
	IntegrationID string
}{
	ID:            "id",
	Origin:        "origin",
	Body:          "body",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	ProjectID:     "project_id",
	IntegrationID: "integration_id",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var OriginProjectIntegrationWhere = struct {
	ID            whereHelperint64
	Origin        whereHelperstring
	Body          whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	ProjectID     whereHelperint64
	IntegrationID whereHelperint64
}{
	ID:            whereHelperint64{field: `id`},
	Origin:        whereHelperstring{field: `origin`},
	Body:          whereHelperstring{field: `body`},
	CreatedAt:     whereHelpertime_Time{field: `created_at`},
	UpdatedAt:     whereHelpertime_Time{field: `updated_at`},
	ProjectID:     whereHelperint64{field: `project_id`},
	IntegrationID: whereHelperint64{field: `integration_id`},
}

// OriginProjectIntegrationRels is where relationship names are stored.
var OriginProjectIntegrationRels = struct {
	Integration string
	Project     string
}{
	Integration: "Integration",
	Project:     "Project",
}

// originProjectIntegrationR is where relationships are stored.
type originProjectIntegrationR struct {
	Integration *OriginIntegration
	Project     *OriginProject
}

// NewStruct creates a new relationship struct
func (*originProjectIntegrationR) NewStruct() *originProjectIntegrationR {
	return &originProjectIntegrationR{}
}

// originProjectIntegrationL is where Load methods for each relationship are stored.
type originProjectIntegrationL struct{}

var (
	originProjectIntegrationColumns               = []string{"id", "origin", "body", "created_at", "updated_at", "project_id", "integration_id"}
	originProjectIntegrationColumnsWithoutDefault = []string{"origin", "body", "project_id", "integration_id"}
	originProjectIntegrationColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	originProjectIntegrationPrimaryKeyColumns     = []string{"id"}
)

type (
	// OriginProjectIntegrationSlice is an alias for a slice of pointers to OriginProjectIntegration.
	// This should generally be used opposed to []OriginProjectIntegration.
	OriginProjectIntegrationSlice []*OriginProjectIntegration
	// OriginProjectIntegrationHook is the signature for custom OriginProjectIntegration hook methods
	OriginProjectIntegrationHook func(context.Context, boil.ContextExecutor, *OriginProjectIntegration) error

	originProjectIntegrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originProjectIntegrationType                 = reflect.TypeOf(&OriginProjectIntegration{})
	originProjectIntegrationMapping              = queries.MakeStructMapping(originProjectIntegrationType)
	originProjectIntegrationPrimaryKeyMapping, _ = queries.BindMapping(originProjectIntegrationType, originProjectIntegrationMapping, originProjectIntegrationPrimaryKeyColumns)
	originProjectIntegrationInsertCacheMut       sync.RWMutex
	originProjectIntegrationInsertCache          = make(map[string]insertCache)
	originProjectIntegrationUpdateCacheMut       sync.RWMutex
	originProjectIntegrationUpdateCache          = make(map[string]updateCache)
	originProjectIntegrationUpsertCacheMut       sync.RWMutex
	originProjectIntegrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originProjectIntegrationBeforeInsertHooks []OriginProjectIntegrationHook
var originProjectIntegrationBeforeUpdateHooks []OriginProjectIntegrationHook
var originProjectIntegrationBeforeDeleteHooks []OriginProjectIntegrationHook
var originProjectIntegrationBeforeUpsertHooks []OriginProjectIntegrationHook

var originProjectIntegrationAfterInsertHooks []OriginProjectIntegrationHook
var originProjectIntegrationAfterSelectHooks []OriginProjectIntegrationHook
var originProjectIntegrationAfterUpdateHooks []OriginProjectIntegrationHook
var originProjectIntegrationAfterDeleteHooks []OriginProjectIntegrationHook
var originProjectIntegrationAfterUpsertHooks []OriginProjectIntegrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OriginProjectIntegration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OriginProjectIntegration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OriginProjectIntegration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OriginProjectIntegration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OriginProjectIntegration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OriginProjectIntegration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OriginProjectIntegration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OriginProjectIntegration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OriginProjectIntegration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originProjectIntegrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginProjectIntegrationHook registers your hook function for all future operations.
func AddOriginProjectIntegrationHook(hookPoint boil.HookPoint, originProjectIntegrationHook OriginProjectIntegrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		originProjectIntegrationBeforeInsertHooks = append(originProjectIntegrationBeforeInsertHooks, originProjectIntegrationHook)
	case boil.BeforeUpdateHook:
		originProjectIntegrationBeforeUpdateHooks = append(originProjectIntegrationBeforeUpdateHooks, originProjectIntegrationHook)
	case boil.BeforeDeleteHook:
		originProjectIntegrationBeforeDeleteHooks = append(originProjectIntegrationBeforeDeleteHooks, originProjectIntegrationHook)
	case boil.BeforeUpsertHook:
		originProjectIntegrationBeforeUpsertHooks = append(originProjectIntegrationBeforeUpsertHooks, originProjectIntegrationHook)
	case boil.AfterInsertHook:
		originProjectIntegrationAfterInsertHooks = append(originProjectIntegrationAfterInsertHooks, originProjectIntegrationHook)
	case boil.AfterSelectHook:
		originProjectIntegrationAfterSelectHooks = append(originProjectIntegrationAfterSelectHooks, originProjectIntegrationHook)
	case boil.AfterUpdateHook:
		originProjectIntegrationAfterUpdateHooks = append(originProjectIntegrationAfterUpdateHooks, originProjectIntegrationHook)
	case boil.AfterDeleteHook:
		originProjectIntegrationAfterDeleteHooks = append(originProjectIntegrationAfterDeleteHooks, originProjectIntegrationHook)
	case boil.AfterUpsertHook:
		originProjectIntegrationAfterUpsertHooks = append(originProjectIntegrationAfterUpsertHooks, originProjectIntegrationHook)
	}
}

// One returns a single originProjectIntegration record from the query.
func (q originProjectIntegrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OriginProjectIntegration, error) {
	o := &OriginProjectIntegration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for origin_project_integrations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OriginProjectIntegration records from the query.
func (q originProjectIntegrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginProjectIntegrationSlice, error) {
	var o []*OriginProjectIntegration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OriginProjectIntegration slice")
	}

	if len(originProjectIntegrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OriginProjectIntegration records in the query.
func (q originProjectIntegrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origin_project_integrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originProjectIntegrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origin_project_integrations exists")
	}

	return count > 0, nil
}

// Integration pointed to by the foreign key.
func (o *OriginProjectIntegration) Integration(mods ...qm.QueryMod) originIntegrationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IntegrationID),
	}

	queryMods = append(queryMods, mods...)

	query := OriginIntegrations(queryMods...)
	queries.SetFrom(query.Query, "\"origin_integrations\"")

	return query
}

// Project pointed to by the foreign key.
func (o *OriginProjectIntegration) Project(mods ...qm.QueryMod) originProjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := OriginProjects(queryMods...)
	queries.SetFrom(query.Query, "\"origin_projects\"")

	return query
}

// LoadIntegration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originProjectIntegrationL) LoadIntegration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginProjectIntegration interface{}, mods queries.Applicator) error {
	var slice []*OriginProjectIntegration
	var object *OriginProjectIntegration

	if singular {
		object = maybeOriginProjectIntegration.(*OriginProjectIntegration)
	} else {
		slice = *maybeOriginProjectIntegration.(*[]*OriginProjectIntegration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originProjectIntegrationR{}
		}
		args = append(args, object.IntegrationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originProjectIntegrationR{}
			}

			for _, a := range args {
				if a == obj.IntegrationID {
					continue Outer
				}
			}

			args = append(args, obj.IntegrationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_integrations`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OriginIntegration")
	}

	var resultSlice []*OriginIntegration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OriginIntegration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origin_integrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_integrations")
	}

	if len(originProjectIntegrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Integration = foreign
		if foreign.R == nil {
			foreign.R = &originIntegrationR{}
		}
		foreign.R.IntegrationOriginProjectIntegrations = append(foreign.R.IntegrationOriginProjectIntegrations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IntegrationID == foreign.ID {
				local.R.Integration = foreign
				if foreign.R == nil {
					foreign.R = &originIntegrationR{}
				}
				foreign.R.IntegrationOriginProjectIntegrations = append(foreign.R.IntegrationOriginProjectIntegrations, local)
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originProjectIntegrationL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginProjectIntegration interface{}, mods queries.Applicator) error {
	var slice []*OriginProjectIntegration
	var object *OriginProjectIntegration

	if singular {
		object = maybeOriginProjectIntegration.(*OriginProjectIntegration)
	} else {
		slice = *maybeOriginProjectIntegration.(*[]*OriginProjectIntegration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originProjectIntegrationR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originProjectIntegrationR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_projects`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OriginProject")
	}

	var resultSlice []*OriginProject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OriginProject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origin_projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_projects")
	}

	if len(originProjectIntegrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &originProjectR{}
		}
		foreign.R.ProjectOriginProjectIntegrations = append(foreign.R.ProjectOriginProjectIntegrations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &originProjectR{}
				}
				foreign.R.ProjectOriginProjectIntegrations = append(foreign.R.ProjectOriginProjectIntegrations, local)
				break
			}
		}
	}

	return nil
}

// SetIntegration of the originProjectIntegration to the related item.
// Sets o.R.Integration to related.
// Adds o to related.R.IntegrationOriginProjectIntegrations.
func (o *OriginProjectIntegration) SetIntegration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OriginIntegration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_project_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"integration_id"}),
		strmangle.WhereClause("\"", "\"", 2, originProjectIntegrationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IntegrationID = related.ID
	if o.R == nil {
		o.R = &originProjectIntegrationR{
			Integration: related,
		}
	} else {
		o.R.Integration = related
	}

	if related.R == nil {
		related.R = &originIntegrationR{
			IntegrationOriginProjectIntegrations: OriginProjectIntegrationSlice{o},
		}
	} else {
		related.R.IntegrationOriginProjectIntegrations = append(related.R.IntegrationOriginProjectIntegrations, o)
	}

	return nil
}

// SetProject of the originProjectIntegration to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.ProjectOriginProjectIntegrations.
func (o *OriginProjectIntegration) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OriginProject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_project_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, originProjectIntegrationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &originProjectIntegrationR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &originProjectR{
			ProjectOriginProjectIntegrations: OriginProjectIntegrationSlice{o},
		}
	} else {
		related.R.ProjectOriginProjectIntegrations = append(related.R.ProjectOriginProjectIntegrations, o)
	}

	return nil
}

// OriginProjectIntegrations retrieves all the records using an executor.
func OriginProjectIntegrations(mods ...qm.QueryMod) originProjectIntegrationQuery {
	mods = append(mods, qm.From("\"origin_project_integrations\""))
	return originProjectIntegrationQuery{NewQuery(mods...)}
}

// FindOriginProjectIntegration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOriginProjectIntegration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OriginProjectIntegration, error) {
	originProjectIntegrationObj := &OriginProjectIntegration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origin_project_integrations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, originProjectIntegrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from origin_project_integrations")
	}

	return originProjectIntegrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OriginProjectIntegration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_project_integrations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originProjectIntegrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originProjectIntegrationInsertCacheMut.RLock()
	cache, cached := originProjectIntegrationInsertCache[key]
	originProjectIntegrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originProjectIntegrationColumns,
			originProjectIntegrationColumnsWithDefault,
			originProjectIntegrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originProjectIntegrationType, originProjectIntegrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originProjectIntegrationType, originProjectIntegrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origin_project_integrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origin_project_integrations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origin_project_integrations")
	}

	if !cached {
		originProjectIntegrationInsertCacheMut.Lock()
		originProjectIntegrationInsertCache[key] = cache
		originProjectIntegrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OriginProjectIntegration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OriginProjectIntegration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originProjectIntegrationUpdateCacheMut.RLock()
	cache, cached := originProjectIntegrationUpdateCache[key]
	originProjectIntegrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originProjectIntegrationColumns,
			originProjectIntegrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origin_project_integrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origin_project_integrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originProjectIntegrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originProjectIntegrationType, originProjectIntegrationMapping, append(wl, originProjectIntegrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origin_project_integrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origin_project_integrations")
	}

	if !cached {
		originProjectIntegrationUpdateCacheMut.Lock()
		originProjectIntegrationUpdateCache[key] = cache
		originProjectIntegrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originProjectIntegrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origin_project_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origin_project_integrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginProjectIntegrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originProjectIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origin_project_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originProjectIntegrationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in originProjectIntegration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all originProjectIntegration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OriginProjectIntegration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_project_integrations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originProjectIntegrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originProjectIntegrationUpsertCacheMut.RLock()
	cache, cached := originProjectIntegrationUpsertCache[key]
	originProjectIntegrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originProjectIntegrationColumns,
			originProjectIntegrationColumnsWithDefault,
			originProjectIntegrationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originProjectIntegrationColumns,
			originProjectIntegrationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origin_project_integrations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originProjectIntegrationPrimaryKeyColumns))
			copy(conflict, originProjectIntegrationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"origin_project_integrations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originProjectIntegrationType, originProjectIntegrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originProjectIntegrationType, originProjectIntegrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origin_project_integrations")
	}

	if !cached {
		originProjectIntegrationUpsertCacheMut.Lock()
		originProjectIntegrationUpsertCache[key] = cache
		originProjectIntegrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OriginProjectIntegration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OriginProjectIntegration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginProjectIntegration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originProjectIntegrationPrimaryKeyMapping)
	sql := "DELETE FROM \"origin_project_integrations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origin_project_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origin_project_integrations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originProjectIntegrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originProjectIntegrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin_project_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_project_integrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginProjectIntegrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginProjectIntegration slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(originProjectIntegrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originProjectIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"origin_project_integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originProjectIntegrationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from originProjectIntegration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_project_integrations")
	}

	if len(originProjectIntegrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OriginProjectIntegration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOriginProjectIntegration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginProjectIntegrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginProjectIntegrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originProjectIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origin_project_integrations\".* FROM \"origin_project_integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originProjectIntegrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginProjectIntegrationSlice")
	}

	*o = slice

	return nil
}

// OriginProjectIntegrationExists checks if the OriginProjectIntegration row exists.
func OriginProjectIntegrationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origin_project_integrations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origin_project_integrations exists")
	}

	return exists, nil
}
