// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOriginPublicKeys(t *testing.T) {
	t.Parallel()

	query := OriginPublicKeys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginPublicKeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginPublicKeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OriginPublicKeys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginPublicKeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginPublicKeySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginPublicKeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginPublicKeyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OriginPublicKey exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginPublicKeyExists to return true, but got false.")
	}
}

func testOriginPublicKeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originPublicKeyFound, err := FindOriginPublicKey(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if originPublicKeyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginPublicKeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OriginPublicKeys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginPublicKeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OriginPublicKeys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginPublicKeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originPublicKeyOne := &OriginPublicKey{}
	originPublicKeyTwo := &OriginPublicKey{}
	if err = randomize.Struct(seed, originPublicKeyOne, originPublicKeyDBTypes, false, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}
	if err = randomize.Struct(seed, originPublicKeyTwo, originPublicKeyDBTypes, false, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originPublicKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originPublicKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginPublicKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginPublicKeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originPublicKeyOne := &OriginPublicKey{}
	originPublicKeyTwo := &OriginPublicKey{}
	if err = randomize.Struct(seed, originPublicKeyOne, originPublicKeyDBTypes, false, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}
	if err = randomize.Struct(seed, originPublicKeyTwo, originPublicKeyDBTypes, false, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originPublicKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originPublicKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originPublicKeyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func originPublicKeyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginPublicKey) error {
	*o = OriginPublicKey{}
	return nil
}

func testOriginPublicKeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OriginPublicKey{}
	o := &OriginPublicKey{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey object: %s", err)
	}

	AddOriginPublicKeyHook(boil.BeforeInsertHook, originPublicKeyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originPublicKeyBeforeInsertHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.AfterInsertHook, originPublicKeyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originPublicKeyAfterInsertHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.AfterSelectHook, originPublicKeyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originPublicKeyAfterSelectHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.BeforeUpdateHook, originPublicKeyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originPublicKeyBeforeUpdateHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.AfterUpdateHook, originPublicKeyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originPublicKeyAfterUpdateHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.BeforeDeleteHook, originPublicKeyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originPublicKeyBeforeDeleteHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.AfterDeleteHook, originPublicKeyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originPublicKeyAfterDeleteHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.BeforeUpsertHook, originPublicKeyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originPublicKeyBeforeUpsertHooks = []OriginPublicKeyHook{}

	AddOriginPublicKeyHook(boil.AfterUpsertHook, originPublicKeyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originPublicKeyAfterUpsertHooks = []OriginPublicKeyHook{}
}

func testOriginPublicKeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginPublicKeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originPublicKeyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginPublicKeyToOneOriginUsingOriginName(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginPublicKey
	var foreign Origin

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Origin, foreign.Name)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OriginName().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Name, foreign.Name) {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	slice := OriginPublicKeySlice{&local}
	if err = local.L.LoadOriginName(ctx, tx, false, (*[]*OriginPublicKey)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginName == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OriginName = nil
	if err = local.L.LoadOriginName(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginName == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginPublicKeyToOneSetOpOriginUsingOriginName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginPublicKey
	var b, c Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originPublicKeyDBTypes, false, strmangle.SetComplement(originPublicKeyPrimaryKeyColumns, originPublicKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Origin{&b, &c} {
		err = a.SetOriginName(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OriginName != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginOPK[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Origin, x.Name) {
			t.Error("foreign key was wrong value", a.Origin)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Origin))
		reflect.Indirect(reflect.ValueOf(&a.Origin)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Origin, x.Name) {
			t.Error("foreign key was wrong value", a.Origin, x.Name)
		}
	}
}

func testOriginPublicKeyToOneRemoveOpOriginUsingOriginName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginPublicKey
	var b Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originPublicKeyDBTypes, false, strmangle.SetComplement(originPublicKeyPrimaryKeyColumns, originPublicKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOriginName(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOriginName(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OriginName().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OriginName != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Origin) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginOPK) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOriginPublicKeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginPublicKeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginPublicKeySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginPublicKeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginPublicKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originPublicKeyDBTypes = map[string]string{`ID`: `bigint`, `OwnerID`: `bigint`, `Name`: `text`, `Revision`: `text`, `FullName`: `text`, `Body`: `bytea`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Origin`: `text`}
	_                      = bytes.MinRead
)

func testOriginPublicKeysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originPublicKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originPublicKeyColumns) == len(originPublicKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginPublicKeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originPublicKeyColumns) == len(originPublicKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginPublicKey{}
	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originPublicKeyDBTypes, true, originPublicKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originPublicKeyColumns, originPublicKeyPrimaryKeyColumns) {
		fields = originPublicKeyColumns
	} else {
		fields = strmangle.SetComplement(
			originPublicKeyColumns,
			originPublicKeyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginPublicKeySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginPublicKeysUpsert(t *testing.T) {
	t.Parallel()

	if len(originPublicKeyColumns) == len(originPublicKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OriginPublicKey{}
	if err = randomize.Struct(seed, &o, originPublicKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginPublicKey: %s", err)
	}

	count, err := OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originPublicKeyDBTypes, false, originPublicKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginPublicKey struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginPublicKey: %s", err)
	}

	count, err = OriginPublicKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
