// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBusyWorkers(t *testing.T) {
	t.Parallel()

	query := BusyWorkers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBusyWorkersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusyWorkersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BusyWorkers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusyWorkersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BusyWorkerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBusyWorkersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BusyWorkerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BusyWorker exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BusyWorkerExists to return true, but got false.")
	}
}

func testBusyWorkersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	busyWorkerFound, err := FindBusyWorker(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if busyWorkerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBusyWorkersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BusyWorkers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBusyWorkersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BusyWorkers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBusyWorkersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	busyWorkerOne := &BusyWorker{}
	busyWorkerTwo := &BusyWorker{}
	if err = randomize.Struct(seed, busyWorkerOne, busyWorkerDBTypes, false, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}
	if err = randomize.Struct(seed, busyWorkerTwo, busyWorkerDBTypes, false, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = busyWorkerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = busyWorkerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BusyWorkers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBusyWorkersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	busyWorkerOne := &BusyWorker{}
	busyWorkerTwo := &BusyWorker{}
	if err = randomize.Struct(seed, busyWorkerOne, busyWorkerDBTypes, false, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}
	if err = randomize.Struct(seed, busyWorkerTwo, busyWorkerDBTypes, false, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = busyWorkerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = busyWorkerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func busyWorkerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func busyWorkerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BusyWorker) error {
	*o = BusyWorker{}
	return nil
}

func testBusyWorkersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BusyWorker{}
	o := &BusyWorker{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BusyWorker object: %s", err)
	}

	AddBusyWorkerHook(boil.BeforeInsertHook, busyWorkerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	busyWorkerBeforeInsertHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.AfterInsertHook, busyWorkerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	busyWorkerAfterInsertHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.AfterSelectHook, busyWorkerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	busyWorkerAfterSelectHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.BeforeUpdateHook, busyWorkerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	busyWorkerBeforeUpdateHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.AfterUpdateHook, busyWorkerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	busyWorkerAfterUpdateHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.BeforeDeleteHook, busyWorkerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	busyWorkerBeforeDeleteHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.AfterDeleteHook, busyWorkerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	busyWorkerAfterDeleteHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.BeforeUpsertHook, busyWorkerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	busyWorkerBeforeUpsertHooks = []BusyWorkerHook{}

	AddBusyWorkerHook(boil.AfterUpsertHook, busyWorkerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	busyWorkerAfterUpsertHooks = []BusyWorkerHook{}
}

func testBusyWorkersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBusyWorkersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(busyWorkerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBusyWorkersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBusyWorkersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BusyWorkerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBusyWorkersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BusyWorkers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	busyWorkerDBTypes = map[string]string{`ID`: `integer`, `Ident`: `text`, `JobID`: `bigint`, `Quarantined`: `boolean`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Target`: `text`}
	_                 = bytes.MinRead
)

func testBusyWorkersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(busyWorkerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(busyWorkerColumns) == len(busyWorkerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBusyWorkersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(busyWorkerColumns) == len(busyWorkerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BusyWorker{}
	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, busyWorkerDBTypes, true, busyWorkerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(busyWorkerColumns, busyWorkerPrimaryKeyColumns) {
		fields = busyWorkerColumns
	} else {
		fields = strmangle.SetComplement(
			busyWorkerColumns,
			busyWorkerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BusyWorkerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBusyWorkersUpsert(t *testing.T) {
	t.Parallel()

	if len(busyWorkerColumns) == len(busyWorkerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BusyWorker{}
	if err = randomize.Struct(seed, &o, busyWorkerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BusyWorker: %s", err)
	}

	count, err := BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, busyWorkerDBTypes, false, busyWorkerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BusyWorker struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BusyWorker: %s", err)
	}

	count, err = BusyWorkers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
