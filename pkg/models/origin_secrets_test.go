// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOriginSecrets(t *testing.T) {
	t.Parallel()

	query := OriginSecrets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginSecretsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginSecretsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OriginSecrets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginSecretsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginSecretSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginSecretsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginSecretExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OriginSecret exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginSecretExists to return true, but got false.")
	}
}

func testOriginSecretsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originSecretFound, err := FindOriginSecret(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if originSecretFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginSecretsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OriginSecrets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginSecretsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OriginSecrets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginSecretsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originSecretOne := &OriginSecret{}
	originSecretTwo := &OriginSecret{}
	if err = randomize.Struct(seed, originSecretOne, originSecretDBTypes, false, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}
	if err = randomize.Struct(seed, originSecretTwo, originSecretDBTypes, false, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originSecretOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originSecretTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginSecrets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginSecretsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originSecretOne := &OriginSecret{}
	originSecretTwo := &OriginSecret{}
	if err = randomize.Struct(seed, originSecretOne, originSecretDBTypes, false, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}
	if err = randomize.Struct(seed, originSecretTwo, originSecretDBTypes, false, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originSecretOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originSecretTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originSecretBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func originSecretAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginSecret) error {
	*o = OriginSecret{}
	return nil
}

func testOriginSecretsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OriginSecret{}
	o := &OriginSecret{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originSecretDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OriginSecret object: %s", err)
	}

	AddOriginSecretHook(boil.BeforeInsertHook, originSecretBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originSecretBeforeInsertHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.AfterInsertHook, originSecretAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originSecretAfterInsertHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.AfterSelectHook, originSecretAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originSecretAfterSelectHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.BeforeUpdateHook, originSecretBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originSecretBeforeUpdateHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.AfterUpdateHook, originSecretAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originSecretAfterUpdateHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.BeforeDeleteHook, originSecretBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originSecretBeforeDeleteHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.AfterDeleteHook, originSecretAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originSecretAfterDeleteHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.BeforeUpsertHook, originSecretBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originSecretBeforeUpsertHooks = []OriginSecretHook{}

	AddOriginSecretHook(boil.AfterUpsertHook, originSecretAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originSecretAfterUpsertHooks = []OriginSecretHook{}
}

func testOriginSecretsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginSecretsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originSecretColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginSecretToOneOriginUsingOrigin(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginSecret
	var foreign Origin

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OriginName, foreign.Name)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Origin().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Name, foreign.Name) {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	slice := OriginSecretSlice{&local}
	if err = local.L.LoadOrigin(ctx, tx, false, (*[]*OriginSecret)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Origin == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Origin = nil
	if err = local.L.LoadOrigin(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Origin == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginSecretToOneSetOpOriginUsingOrigin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginSecret
	var b, c Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originSecretDBTypes, false, strmangle.SetComplement(originSecretPrimaryKeyColumns, originSecretColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Origin{&b, &c} {
		err = a.SetOrigin(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Origin != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginOS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OriginName, x.Name) {
			t.Error("foreign key was wrong value", a.OriginName)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OriginName))
		reflect.Indirect(reflect.ValueOf(&a.OriginName)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OriginName, x.Name) {
			t.Error("foreign key was wrong value", a.OriginName, x.Name)
		}
	}
}

func testOriginSecretToOneRemoveOpOriginUsingOrigin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginSecret
	var b Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originSecretDBTypes, false, strmangle.SetComplement(originSecretPrimaryKeyColumns, originSecretColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrigin(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrigin(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Origin().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Origin != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OriginName) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginOS) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOriginSecretsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginSecretsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginSecretSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginSecretsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginSecrets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originSecretDBTypes = map[string]string{`ID`: `bigint`, `OwnerID`: `bigint`, `Name`: `text`, `Value`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `OriginName`: `text`}
	_                   = bytes.MinRead
)

func testOriginSecretsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originSecretColumns) == len(originSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginSecretsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originSecretColumns) == len(originSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginSecret{}
	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originSecretDBTypes, true, originSecretPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originSecretColumns, originSecretPrimaryKeyColumns) {
		fields = originSecretColumns
	} else {
		fields = strmangle.SetComplement(
			originSecretColumns,
			originSecretPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginSecretSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginSecretsUpsert(t *testing.T) {
	t.Parallel()

	if len(originSecretColumns) == len(originSecretPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OriginSecret{}
	if err = randomize.Struct(seed, &o, originSecretDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginSecret: %s", err)
	}

	count, err := OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originSecretDBTypes, false, originSecretPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginSecret struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginSecret: %s", err)
	}

	count, err = OriginSecrets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
