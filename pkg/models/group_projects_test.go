// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGroupProjects(t *testing.T) {
	t.Parallel()

	query := GroupProjects()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGroupProjectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupProjectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GroupProjects().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupProjectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupProjectSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupProjectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GroupProjectExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GroupProject exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GroupProjectExists to return true, but got false.")
	}
}

func testGroupProjectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	groupProjectFound, err := FindGroupProject(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if groupProjectFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGroupProjectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GroupProjects().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGroupProjectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GroupProjects().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGroupProjectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	groupProjectOne := &GroupProject{}
	groupProjectTwo := &GroupProject{}
	if err = randomize.Struct(seed, groupProjectOne, groupProjectDBTypes, false, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}
	if err = randomize.Struct(seed, groupProjectTwo, groupProjectDBTypes, false, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupProjectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupProjectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupProjects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGroupProjectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	groupProjectOne := &GroupProject{}
	groupProjectTwo := &GroupProject{}
	if err = randomize.Struct(seed, groupProjectOne, groupProjectDBTypes, false, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}
	if err = randomize.Struct(seed, groupProjectTwo, groupProjectDBTypes, false, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupProjectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupProjectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func groupProjectBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func groupProjectAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupProject) error {
	*o = GroupProject{}
	return nil
}

func testGroupProjectsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GroupProject{}
	o := &GroupProject{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, groupProjectDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroupProject object: %s", err)
	}

	AddGroupProjectHook(boil.BeforeInsertHook, groupProjectBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	groupProjectBeforeInsertHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.AfterInsertHook, groupProjectAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	groupProjectAfterInsertHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.AfterSelectHook, groupProjectAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	groupProjectAfterSelectHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.BeforeUpdateHook, groupProjectBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	groupProjectBeforeUpdateHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.AfterUpdateHook, groupProjectAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	groupProjectAfterUpdateHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.BeforeDeleteHook, groupProjectBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	groupProjectBeforeDeleteHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.AfterDeleteHook, groupProjectAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	groupProjectAfterDeleteHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.BeforeUpsertHook, groupProjectBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	groupProjectBeforeUpsertHooks = []GroupProjectHook{}

	AddGroupProjectHook(boil.AfterUpsertHook, groupProjectAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	groupProjectAfterUpsertHooks = []GroupProjectHook{}
}

func testGroupProjectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupProjectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(groupProjectColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupProjectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupProjectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupProjectSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupProjectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupProjects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	groupProjectDBTypes = map[string]string{`ID`: `bigint`, `OwnerID`: `bigint`, `ProjectName`: `text`, `ProjectIdent`: `text`, `ProjectState`: `text`, `JobID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Target`: `text`}
	_                   = bytes.MinRead
)

func testGroupProjectsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(groupProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(groupProjectColumns) == len(groupProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGroupProjectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(groupProjectColumns) == len(groupProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupProject{}
	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupProjectDBTypes, true, groupProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(groupProjectColumns, groupProjectPrimaryKeyColumns) {
		fields = groupProjectColumns
	} else {
		fields = strmangle.SetComplement(
			groupProjectColumns,
			groupProjectPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GroupProjectSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGroupProjectsUpsert(t *testing.T) {
	t.Parallel()

	if len(groupProjectColumns) == len(groupProjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GroupProject{}
	if err = randomize.Struct(seed, &o, groupProjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupProject: %s", err)
	}

	count, err := GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, groupProjectDBTypes, false, groupProjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupProject struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupProject: %s", err)
	}

	count, err = GroupProjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
