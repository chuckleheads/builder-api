// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOriginMembers(t *testing.T) {
	t.Parallel()

	query := OriginMembers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OriginMembers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginMemberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginMemberExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OriginMember exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginMemberExists to return true, but got false.")
	}
}

func testOriginMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originMemberFound, err := FindOriginMember(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if originMemberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OriginMembers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OriginMembers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originMemberOne := &OriginMember{}
	originMemberTwo := &OriginMember{}
	if err = randomize.Struct(seed, originMemberOne, originMemberDBTypes, false, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}
	if err = randomize.Struct(seed, originMemberTwo, originMemberDBTypes, false, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originMemberOne := &OriginMember{}
	originMemberTwo := &OriginMember{}
	if err = randomize.Struct(seed, originMemberOne, originMemberDBTypes, false, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}
	if err = randomize.Struct(seed, originMemberTwo, originMemberDBTypes, false, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originMemberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func originMemberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginMember) error {
	*o = OriginMember{}
	return nil
}

func testOriginMembersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OriginMember{}
	o := &OriginMember{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originMemberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OriginMember object: %s", err)
	}

	AddOriginMemberHook(boil.BeforeInsertHook, originMemberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originMemberBeforeInsertHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.AfterInsertHook, originMemberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originMemberAfterInsertHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.AfterSelectHook, originMemberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originMemberAfterSelectHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.BeforeUpdateHook, originMemberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originMemberBeforeUpdateHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.AfterUpdateHook, originMemberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originMemberAfterUpdateHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.BeforeDeleteHook, originMemberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originMemberBeforeDeleteHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.AfterDeleteHook, originMemberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originMemberAfterDeleteHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.BeforeUpsertHook, originMemberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originMemberBeforeUpsertHooks = []OriginMemberHook{}

	AddOriginMemberHook(boil.AfterUpsertHook, originMemberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originMemberAfterUpsertHooks = []OriginMemberHook{}
}

func testOriginMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originMemberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginMemberToOneOriginUsingOrigin(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginMember
	var foreign Origin

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OriginName, foreign.Name)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Origin().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Name, foreign.Name) {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	slice := OriginMemberSlice{&local}
	if err = local.L.LoadOrigin(ctx, tx, false, (*[]*OriginMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Origin == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Origin = nil
	if err = local.L.LoadOrigin(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Origin == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginMemberToOneSetOpOriginUsingOrigin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginMember
	var b, c Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originMemberDBTypes, false, strmangle.SetComplement(originMemberPrimaryKeyColumns, originMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Origin{&b, &c} {
		err = a.SetOrigin(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Origin != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginOM[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OriginName, x.Name) {
			t.Error("foreign key was wrong value", a.OriginName)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OriginName))
		reflect.Indirect(reflect.ValueOf(&a.OriginName)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OriginName, x.Name) {
			t.Error("foreign key was wrong value", a.OriginName, x.Name)
		}
	}
}

func testOriginMemberToOneRemoveOpOriginUsingOrigin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginMember
	var b Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originMemberDBTypes, false, strmangle.SetComplement(originMemberPrimaryKeyColumns, originMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrigin(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrigin(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Origin().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Origin != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OriginName) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginOM) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOriginMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginMemberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originMemberDBTypes = map[string]string{`ID`: `integer`, `OriginName`: `text`, `AccountID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testOriginMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originMemberColumns) == len(originMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originMemberColumns) == len(originMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginMember{}
	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originMemberDBTypes, true, originMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originMemberColumns, originMemberPrimaryKeyColumns) {
		fields = originMemberColumns
	} else {
		fields = strmangle.SetComplement(
			originMemberColumns,
			originMemberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginMemberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(originMemberColumns) == len(originMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OriginMember{}
	if err = randomize.Struct(seed, &o, originMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginMember: %s", err)
	}

	count, err := OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originMemberDBTypes, false, originMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginMember struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginMember: %s", err)
	}

	count, err = OriginMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
