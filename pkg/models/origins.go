// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Origin is an object representing the database table.
type Origin struct {
	Name                     string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	OwnerID                  int64     `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	CreatedAt                null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DefaultPackageVisibility string    `boil:"default_package_visibility" json:"default_package_visibility" toml:"default_package_visibility" yaml:"default_package_visibility"`

	R *originR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L originL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginColumns = struct {
	Name                     string
	OwnerID                  string
	CreatedAt                string
	UpdatedAt                string
	DefaultPackageVisibility string
}{
	Name:                     "name",
	OwnerID:                  "owner_id",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
	DefaultPackageVisibility: "default_package_visibility",
}

// Generated where

var OriginWhere = struct {
	Name                     whereHelperstring
	OwnerID                  whereHelperint64
	CreatedAt                whereHelpernull_Time
	UpdatedAt                whereHelpernull_Time
	DefaultPackageVisibility whereHelperstring
}{
	Name:                     whereHelperstring{field: `name`},
	OwnerID:                  whereHelperint64{field: `owner_id`},
	CreatedAt:                whereHelpernull_Time{field: `created_at`},
	UpdatedAt:                whereHelpernull_Time{field: `updated_at`},
	DefaultPackageVisibility: whereHelperstring{field: `default_package_visibility`},
}

// OriginRels is where relationship names are stored.
var OriginRels = struct {
	OriginAP    string
	OriginAPG   string
	OriginOC    string
	OriginOI    string
	OriginOM    string
	OriginOPA   string
	OriginOPREK string
	OriginOPR   string
	OriginOPUEK string
	OriginOPK   string
	OriginOSK   string
	OriginOS    string
}{
	OriginAP:    "OriginAP",
	OriginAPG:   "OriginAPG",
	OriginOC:    "OriginOC",
	OriginOI:    "OriginOI",
	OriginOM:    "OriginOM",
	OriginOPA:   "OriginOPA",
	OriginOPREK: "OriginOPREK",
	OriginOPR:   "OriginOPR",
	OriginOPUEK: "OriginOPUEK",
	OriginOPK:   "OriginOPK",
	OriginOSK:   "OriginOSK",
	OriginOS:    "OriginOS",
}

// originR is where relationships are stored.
type originR struct {
	OriginAP    AuditPackageSlice
	OriginAPG   AuditPackageGroupSlice
	OriginOC    OriginChannelSlice
	OriginOI    OriginInvitationSlice
	OriginOM    OriginMemberSlice
	OriginOPA   OriginPackageSlice
	OriginOPREK OriginPrivateEncryptionKeySlice
	OriginOPR   OriginProjectSlice
	OriginOPUEK OriginPublicEncryptionKeySlice
	OriginOPK   OriginPublicKeySlice
	OriginOSK   OriginSecretKeySlice
	OriginOS    OriginSecretSlice
}

// NewStruct creates a new relationship struct
func (*originR) NewStruct() *originR {
	return &originR{}
}

// originL is where Load methods for each relationship are stored.
type originL struct{}

var (
	originColumns               = []string{"name", "owner_id", "created_at", "updated_at", "default_package_visibility"}
	originColumnsWithoutDefault = []string{"name", "owner_id"}
	originColumnsWithDefault    = []string{"created_at", "updated_at", "default_package_visibility"}
	originPrimaryKeyColumns     = []string{"name"}
)

type (
	// OriginSlice is an alias for a slice of pointers to Origin.
	// This should generally be used opposed to []Origin.
	OriginSlice []*Origin
	// OriginHook is the signature for custom Origin hook methods
	OriginHook func(context.Context, boil.ContextExecutor, *Origin) error

	originQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originType                 = reflect.TypeOf(&Origin{})
	originMapping              = queries.MakeStructMapping(originType)
	originPrimaryKeyMapping, _ = queries.BindMapping(originType, originMapping, originPrimaryKeyColumns)
	originInsertCacheMut       sync.RWMutex
	originInsertCache          = make(map[string]insertCache)
	originUpdateCacheMut       sync.RWMutex
	originUpdateCache          = make(map[string]updateCache)
	originUpsertCacheMut       sync.RWMutex
	originUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originBeforeInsertHooks []OriginHook
var originBeforeUpdateHooks []OriginHook
var originBeforeDeleteHooks []OriginHook
var originBeforeUpsertHooks []OriginHook

var originAfterInsertHooks []OriginHook
var originAfterSelectHooks []OriginHook
var originAfterUpdateHooks []OriginHook
var originAfterDeleteHooks []OriginHook
var originAfterUpsertHooks []OriginHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Origin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Origin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Origin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Origin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Origin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Origin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Origin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Origin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Origin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginHook registers your hook function for all future operations.
func AddOriginHook(hookPoint boil.HookPoint, originHook OriginHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		originBeforeInsertHooks = append(originBeforeInsertHooks, originHook)
	case boil.BeforeUpdateHook:
		originBeforeUpdateHooks = append(originBeforeUpdateHooks, originHook)
	case boil.BeforeDeleteHook:
		originBeforeDeleteHooks = append(originBeforeDeleteHooks, originHook)
	case boil.BeforeUpsertHook:
		originBeforeUpsertHooks = append(originBeforeUpsertHooks, originHook)
	case boil.AfterInsertHook:
		originAfterInsertHooks = append(originAfterInsertHooks, originHook)
	case boil.AfterSelectHook:
		originAfterSelectHooks = append(originAfterSelectHooks, originHook)
	case boil.AfterUpdateHook:
		originAfterUpdateHooks = append(originAfterUpdateHooks, originHook)
	case boil.AfterDeleteHook:
		originAfterDeleteHooks = append(originAfterDeleteHooks, originHook)
	case boil.AfterUpsertHook:
		originAfterUpsertHooks = append(originAfterUpsertHooks, originHook)
	}
}

// One returns a single origin record from the query.
func (q originQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Origin, error) {
	o := &Origin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for origins")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Origin records from the query.
func (q originQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginSlice, error) {
	var o []*Origin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Origin slice")
	}

	if len(originAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Origin records in the query.
func (q originQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origins exists")
	}

	return count > 0, nil
}

// OriginAP retrieves all the audit_package's AuditPackages with an executor via origin column.
func (o *Origin) OriginAP(mods ...qm.QueryMod) auditPackageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"audit_package\".\"origin\"=?", o.Name),
	)

	query := AuditPackages(queryMods...)
	queries.SetFrom(query.Query, "\"audit_package\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"audit_package\".*"})
	}

	return query
}

// OriginAPG retrieves all the audit_package_group's AuditPackageGroups with an executor via origin column.
func (o *Origin) OriginAPG(mods ...qm.QueryMod) auditPackageGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"audit_package_group\".\"origin\"=?", o.Name),
	)

	query := AuditPackageGroups(queryMods...)
	queries.SetFrom(query.Query, "\"audit_package_group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"audit_package_group\".*"})
	}

	return query
}

// OriginOC retrieves all the origin_channel's OriginChannels with an executor via origin column.
func (o *Origin) OriginOC(mods ...qm.QueryMod) originChannelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_channels\".\"origin\"=?", o.Name),
	)

	query := OriginChannels(queryMods...)
	queries.SetFrom(query.Query, "\"origin_channels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_channels\".*"})
	}

	return query
}

// OriginOI retrieves all the origin_invitation's OriginInvitations with an executor via origin column.
func (o *Origin) OriginOI(mods ...qm.QueryMod) originInvitationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_invitations\".\"origin\"=?", o.Name),
	)

	query := OriginInvitations(queryMods...)
	queries.SetFrom(query.Query, "\"origin_invitations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_invitations\".*"})
	}

	return query
}

// OriginOM retrieves all the origin_member's OriginMembers with an executor via origin column.
func (o *Origin) OriginOM(mods ...qm.QueryMod) originMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_members\".\"origin\"=?", o.Name),
	)

	query := OriginMembers(queryMods...)
	queries.SetFrom(query.Query, "\"origin_members\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_members\".*"})
	}

	return query
}

// OriginOPA retrieves all the origin_package's OriginPackages with an executor via origin column.
func (o *Origin) OriginOPA(mods ...qm.QueryMod) originPackageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_packages\".\"origin\"=?", o.Name),
	)

	query := OriginPackages(queryMods...)
	queries.SetFrom(query.Query, "\"origin_packages\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_packages\".*"})
	}

	return query
}

// OriginOPREK retrieves all the origin_private_encryption_key's OriginPrivateEncryptionKeys with an executor via origin column.
func (o *Origin) OriginOPREK(mods ...qm.QueryMod) originPrivateEncryptionKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_private_encryption_keys\".\"origin\"=?", o.Name),
	)

	query := OriginPrivateEncryptionKeys(queryMods...)
	queries.SetFrom(query.Query, "\"origin_private_encryption_keys\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_private_encryption_keys\".*"})
	}

	return query
}

// OriginOPR retrieves all the origin_project's OriginProjects with an executor via origin column.
func (o *Origin) OriginOPR(mods ...qm.QueryMod) originProjectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_projects\".\"origin\"=?", o.Name),
	)

	query := OriginProjects(queryMods...)
	queries.SetFrom(query.Query, "\"origin_projects\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_projects\".*"})
	}

	return query
}

// OriginOPUEK retrieves all the origin_public_encryption_key's OriginPublicEncryptionKeys with an executor via origin column.
func (o *Origin) OriginOPUEK(mods ...qm.QueryMod) originPublicEncryptionKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_public_encryption_keys\".\"origin\"=?", o.Name),
	)

	query := OriginPublicEncryptionKeys(queryMods...)
	queries.SetFrom(query.Query, "\"origin_public_encryption_keys\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_public_encryption_keys\".*"})
	}

	return query
}

// OriginOPK retrieves all the origin_public_key's OriginPublicKeys with an executor via origin column.
func (o *Origin) OriginOPK(mods ...qm.QueryMod) originPublicKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_public_keys\".\"origin\"=?", o.Name),
	)

	query := OriginPublicKeys(queryMods...)
	queries.SetFrom(query.Query, "\"origin_public_keys\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_public_keys\".*"})
	}

	return query
}

// OriginOSK retrieves all the origin_secret_key's OriginSecretKeys with an executor via origin column.
func (o *Origin) OriginOSK(mods ...qm.QueryMod) originSecretKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_secret_keys\".\"origin\"=?", o.Name),
	)

	query := OriginSecretKeys(queryMods...)
	queries.SetFrom(query.Query, "\"origin_secret_keys\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_secret_keys\".*"})
	}

	return query
}

// OriginOS retrieves all the origin_secret's OriginSecrets with an executor via origin column.
func (o *Origin) OriginOS(mods ...qm.QueryMod) originSecretQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_secrets\".\"origin\"=?", o.Name),
	)

	query := OriginSecrets(queryMods...)
	queries.SetFrom(query.Query, "\"origin_secrets\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_secrets\".*"})
	}

	return query
}

// LoadOriginAP allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginAP(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`audit_package`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load audit_package")
	}

	var resultSlice []*AuditPackage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice audit_package")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on audit_package")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for audit_package")
	}

	if len(auditPackageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginAP = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &auditPackageR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginAP = append(local.R.OriginAP, foreign)
				if foreign.R == nil {
					foreign.R = &auditPackageR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginAPG allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginAPG(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`audit_package_group`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load audit_package_group")
	}

	var resultSlice []*AuditPackageGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice audit_package_group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on audit_package_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for audit_package_group")
	}

	if len(auditPackageGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginAPG = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &auditPackageGroupR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginAPG = append(local.R.OriginAPG, foreign)
				if foreign.R == nil {
					foreign.R = &auditPackageGroupR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOC allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOC(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_channels`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_channels")
	}

	var resultSlice []*OriginChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_channels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_channels")
	}

	if len(originChannelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOC = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originChannelR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOC = append(local.R.OriginOC, foreign)
				if foreign.R == nil {
					foreign.R = &originChannelR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOI allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOI(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_invitations`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_invitations")
	}

	var resultSlice []*OriginInvitation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_invitations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_invitations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_invitations")
	}

	if len(originInvitationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOI = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originInvitationR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOI = append(local.R.OriginOI, foreign)
				if foreign.R == nil {
					foreign.R = &originInvitationR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOM allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOM(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_members`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_members")
	}

	var resultSlice []*OriginMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_members")
	}

	if len(originMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOM = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originMemberR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOM = append(local.R.OriginOM, foreign)
				if foreign.R == nil {
					foreign.R = &originMemberR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOPA allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOPA(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_packages`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_packages")
	}

	var resultSlice []*OriginPackage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_packages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_packages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_packages")
	}

	if len(originPackageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOPA = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originPackageR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOPA = append(local.R.OriginOPA, foreign)
				if foreign.R == nil {
					foreign.R = &originPackageR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOPREK allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOPREK(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_private_encryption_keys`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_private_encryption_keys")
	}

	var resultSlice []*OriginPrivateEncryptionKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_private_encryption_keys")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_private_encryption_keys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_private_encryption_keys")
	}

	if len(originPrivateEncryptionKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOPREK = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originPrivateEncryptionKeyR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOPREK = append(local.R.OriginOPREK, foreign)
				if foreign.R == nil {
					foreign.R = &originPrivateEncryptionKeyR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOPR allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOPR(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_projects`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_projects")
	}

	var resultSlice []*OriginProject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_projects")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_projects")
	}

	if len(originProjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOPR = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originProjectR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOPR = append(local.R.OriginOPR, foreign)
				if foreign.R == nil {
					foreign.R = &originProjectR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOPUEK allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOPUEK(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_public_encryption_keys`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_public_encryption_keys")
	}

	var resultSlice []*OriginPublicEncryptionKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_public_encryption_keys")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_public_encryption_keys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_public_encryption_keys")
	}

	if len(originPublicEncryptionKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOPUEK = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originPublicEncryptionKeyR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOPUEK = append(local.R.OriginOPUEK, foreign)
				if foreign.R == nil {
					foreign.R = &originPublicEncryptionKeyR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOPK allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOPK(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_public_keys`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_public_keys")
	}

	var resultSlice []*OriginPublicKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_public_keys")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_public_keys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_public_keys")
	}

	if len(originPublicKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOPK = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originPublicKeyR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOPK = append(local.R.OriginOPK, foreign)
				if foreign.R == nil {
					foreign.R = &originPublicKeyR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOSK allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOSK(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_secret_keys`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_secret_keys")
	}

	var resultSlice []*OriginSecretKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_secret_keys")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_secret_keys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_secret_keys")
	}

	if len(originSecretKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOSK = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originSecretKeyR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOSK = append(local.R.OriginOSK, foreign)
				if foreign.R == nil {
					foreign.R = &originSecretKeyR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// LoadOriginOS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originL) LoadOriginOS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrigin interface{}, mods queries.Applicator) error {
	var slice []*Origin
	var object *Origin

	if singular {
		object = maybeOrigin.(*Origin)
	} else {
		slice = *maybeOrigin.(*[]*Origin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originR{}
		}
		args = append(args, object.Name)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Name) {
					continue Outer
				}
			}

			args = append(args, obj.Name)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_secrets`), qm.WhereIn(`origin in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_secrets")
	}

	var resultSlice []*OriginSecret
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_secrets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_secrets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_secrets")
	}

	if len(originSecretAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginOS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originSecretR{}
			}
			foreign.R.OriginName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Name, foreign.Origin) {
				local.R.OriginOS = append(local.R.OriginOS, foreign)
				if foreign.R == nil {
					foreign.R = &originSecretR{}
				}
				foreign.R.OriginName = local
				break
			}
		}
	}

	return nil
}

// AddOriginAP adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginAP.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginAP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuditPackage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"audit_package\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, auditPackagePrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginAP: related,
		}
	} else {
		o.R.OriginAP = append(o.R.OriginAP, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &auditPackageR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginAP removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginAP accordingly.
// Replaces o.R.OriginAP with related.
// Sets related.R.OriginName's OriginAP accordingly.
func (o *Origin) SetOriginAP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuditPackage) error {
	query := "update \"audit_package\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginAP {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginAP = nil
	}
	return o.AddOriginAP(ctx, exec, insert, related...)
}

// RemoveOriginAP relationships from objects passed in.
// Removes related items from R.OriginAP (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginAP(ctx context.Context, exec boil.ContextExecutor, related ...*AuditPackage) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginAP {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginAP)
			if ln > 1 && i < ln-1 {
				o.R.OriginAP[i] = o.R.OriginAP[ln-1]
			}
			o.R.OriginAP = o.R.OriginAP[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginAPG adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginAPG.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginAPG(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuditPackageGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"audit_package_group\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, auditPackageGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginAPG: related,
		}
	} else {
		o.R.OriginAPG = append(o.R.OriginAPG, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &auditPackageGroupR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginAPG removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginAPG accordingly.
// Replaces o.R.OriginAPG with related.
// Sets related.R.OriginName's OriginAPG accordingly.
func (o *Origin) SetOriginAPG(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuditPackageGroup) error {
	query := "update \"audit_package_group\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginAPG {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginAPG = nil
	}
	return o.AddOriginAPG(ctx, exec, insert, related...)
}

// RemoveOriginAPG relationships from objects passed in.
// Removes related items from R.OriginAPG (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginAPG(ctx context.Context, exec boil.ContextExecutor, related ...*AuditPackageGroup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginAPG {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginAPG)
			if ln > 1 && i < ln-1 {
				o.R.OriginAPG[i] = o.R.OriginAPG[ln-1]
			}
			o.R.OriginAPG = o.R.OriginAPG[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOC adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOC.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOC(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginChannel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_channels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originChannelPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOC: related,
		}
	} else {
		o.R.OriginOC = append(o.R.OriginOC, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originChannelR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOC removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOC accordingly.
// Replaces o.R.OriginOC with related.
// Sets related.R.OriginName's OriginOC accordingly.
func (o *Origin) SetOriginOC(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginChannel) error {
	query := "update \"origin_channels\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOC {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOC = nil
	}
	return o.AddOriginOC(ctx, exec, insert, related...)
}

// RemoveOriginOC relationships from objects passed in.
// Removes related items from R.OriginOC (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOC(ctx context.Context, exec boil.ContextExecutor, related ...*OriginChannel) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOC {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOC)
			if ln > 1 && i < ln-1 {
				o.R.OriginOC[i] = o.R.OriginOC[ln-1]
			}
			o.R.OriginOC = o.R.OriginOC[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOI adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOI.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOI(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginInvitation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_invitations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originInvitationPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOI: related,
		}
	} else {
		o.R.OriginOI = append(o.R.OriginOI, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originInvitationR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOI removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOI accordingly.
// Replaces o.R.OriginOI with related.
// Sets related.R.OriginName's OriginOI accordingly.
func (o *Origin) SetOriginOI(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginInvitation) error {
	query := "update \"origin_invitations\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOI {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOI = nil
	}
	return o.AddOriginOI(ctx, exec, insert, related...)
}

// RemoveOriginOI relationships from objects passed in.
// Removes related items from R.OriginOI (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOI(ctx context.Context, exec boil.ContextExecutor, related ...*OriginInvitation) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOI {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOI)
			if ln > 1 && i < ln-1 {
				o.R.OriginOI[i] = o.R.OriginOI[ln-1]
			}
			o.R.OriginOI = o.R.OriginOI[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOM adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOM.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOM(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginMember) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOM: related,
		}
	} else {
		o.R.OriginOM = append(o.R.OriginOM, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originMemberR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOM removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOM accordingly.
// Replaces o.R.OriginOM with related.
// Sets related.R.OriginName's OriginOM accordingly.
func (o *Origin) SetOriginOM(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginMember) error {
	query := "update \"origin_members\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOM {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOM = nil
	}
	return o.AddOriginOM(ctx, exec, insert, related...)
}

// RemoveOriginOM relationships from objects passed in.
// Removes related items from R.OriginOM (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOM(ctx context.Context, exec boil.ContextExecutor, related ...*OriginMember) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOM {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOM)
			if ln > 1 && i < ln-1 {
				o.R.OriginOM[i] = o.R.OriginOM[ln-1]
			}
			o.R.OriginOM = o.R.OriginOM[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOPA adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOPA.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOPA(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPackage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_packages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originPackagePrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOPA: related,
		}
	} else {
		o.R.OriginOPA = append(o.R.OriginOPA, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originPackageR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOPA removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOPA accordingly.
// Replaces o.R.OriginOPA with related.
// Sets related.R.OriginName's OriginOPA accordingly.
func (o *Origin) SetOriginOPA(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPackage) error {
	query := "update \"origin_packages\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOPA {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOPA = nil
	}
	return o.AddOriginOPA(ctx, exec, insert, related...)
}

// RemoveOriginOPA relationships from objects passed in.
// Removes related items from R.OriginOPA (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOPA(ctx context.Context, exec boil.ContextExecutor, related ...*OriginPackage) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOPA {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOPA)
			if ln > 1 && i < ln-1 {
				o.R.OriginOPA[i] = o.R.OriginOPA[ln-1]
			}
			o.R.OriginOPA = o.R.OriginOPA[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOPREK adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOPREK.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOPREK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPrivateEncryptionKey) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_private_encryption_keys\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originPrivateEncryptionKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOPREK: related,
		}
	} else {
		o.R.OriginOPREK = append(o.R.OriginOPREK, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originPrivateEncryptionKeyR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOPREK removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOPREK accordingly.
// Replaces o.R.OriginOPREK with related.
// Sets related.R.OriginName's OriginOPREK accordingly.
func (o *Origin) SetOriginOPREK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPrivateEncryptionKey) error {
	query := "update \"origin_private_encryption_keys\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOPREK {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOPREK = nil
	}
	return o.AddOriginOPREK(ctx, exec, insert, related...)
}

// RemoveOriginOPREK relationships from objects passed in.
// Removes related items from R.OriginOPREK (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOPREK(ctx context.Context, exec boil.ContextExecutor, related ...*OriginPrivateEncryptionKey) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOPREK {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOPREK)
			if ln > 1 && i < ln-1 {
				o.R.OriginOPREK[i] = o.R.OriginOPREK[ln-1]
			}
			o.R.OriginOPREK = o.R.OriginOPREK[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOPR adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOPR.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOPR(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginProject) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_projects\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originProjectPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOPR: related,
		}
	} else {
		o.R.OriginOPR = append(o.R.OriginOPR, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originProjectR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOPR removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOPR accordingly.
// Replaces o.R.OriginOPR with related.
// Sets related.R.OriginName's OriginOPR accordingly.
func (o *Origin) SetOriginOPR(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginProject) error {
	query := "update \"origin_projects\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOPR {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOPR = nil
	}
	return o.AddOriginOPR(ctx, exec, insert, related...)
}

// RemoveOriginOPR relationships from objects passed in.
// Removes related items from R.OriginOPR (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOPR(ctx context.Context, exec boil.ContextExecutor, related ...*OriginProject) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOPR {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOPR)
			if ln > 1 && i < ln-1 {
				o.R.OriginOPR[i] = o.R.OriginOPR[ln-1]
			}
			o.R.OriginOPR = o.R.OriginOPR[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOPUEK adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOPUEK.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOPUEK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPublicEncryptionKey) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_public_encryption_keys\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originPublicEncryptionKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOPUEK: related,
		}
	} else {
		o.R.OriginOPUEK = append(o.R.OriginOPUEK, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originPublicEncryptionKeyR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOPUEK removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOPUEK accordingly.
// Replaces o.R.OriginOPUEK with related.
// Sets related.R.OriginName's OriginOPUEK accordingly.
func (o *Origin) SetOriginOPUEK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPublicEncryptionKey) error {
	query := "update \"origin_public_encryption_keys\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOPUEK {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOPUEK = nil
	}
	return o.AddOriginOPUEK(ctx, exec, insert, related...)
}

// RemoveOriginOPUEK relationships from objects passed in.
// Removes related items from R.OriginOPUEK (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOPUEK(ctx context.Context, exec boil.ContextExecutor, related ...*OriginPublicEncryptionKey) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOPUEK {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOPUEK)
			if ln > 1 && i < ln-1 {
				o.R.OriginOPUEK[i] = o.R.OriginOPUEK[ln-1]
			}
			o.R.OriginOPUEK = o.R.OriginOPUEK[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOPK adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOPK.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOPK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPublicKey) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_public_keys\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originPublicKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOPK: related,
		}
	} else {
		o.R.OriginOPK = append(o.R.OriginOPK, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originPublicKeyR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOPK removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOPK accordingly.
// Replaces o.R.OriginOPK with related.
// Sets related.R.OriginName's OriginOPK accordingly.
func (o *Origin) SetOriginOPK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginPublicKey) error {
	query := "update \"origin_public_keys\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOPK {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOPK = nil
	}
	return o.AddOriginOPK(ctx, exec, insert, related...)
}

// RemoveOriginOPK relationships from objects passed in.
// Removes related items from R.OriginOPK (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOPK(ctx context.Context, exec boil.ContextExecutor, related ...*OriginPublicKey) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOPK {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOPK)
			if ln > 1 && i < ln-1 {
				o.R.OriginOPK[i] = o.R.OriginOPK[ln-1]
			}
			o.R.OriginOPK = o.R.OriginOPK[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOSK adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOSK.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOSK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginSecretKey) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_secret_keys\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originSecretKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOSK: related,
		}
	} else {
		o.R.OriginOSK = append(o.R.OriginOSK, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originSecretKeyR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOSK removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOSK accordingly.
// Replaces o.R.OriginOSK with related.
// Sets related.R.OriginName's OriginOSK accordingly.
func (o *Origin) SetOriginOSK(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginSecretKey) error {
	query := "update \"origin_secret_keys\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOSK {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOSK = nil
	}
	return o.AddOriginOSK(ctx, exec, insert, related...)
}

// RemoveOriginOSK relationships from objects passed in.
// Removes related items from R.OriginOSK (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOSK(ctx context.Context, exec boil.ContextExecutor, related ...*OriginSecretKey) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOSK {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOSK)
			if ln > 1 && i < ln-1 {
				o.R.OriginOSK[i] = o.R.OriginOSK[ln-1]
			}
			o.R.OriginOSK = o.R.OriginOSK[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginOS adds the given related objects to the existing relationships
// of the origin, optionally inserting them as new records.
// Appends related to o.R.OriginOS.
// Sets related.R.OriginName appropriately.
func (o *Origin) AddOriginOS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginSecret) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Origin, o.Name)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_secrets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
				strmangle.WhereClause("\"", "\"", 2, originSecretPrimaryKeyColumns),
			)
			values := []interface{}{o.Name, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Origin, o.Name)
		}
	}

	if o.R == nil {
		o.R = &originR{
			OriginOS: related,
		}
	} else {
		o.R.OriginOS = append(o.R.OriginOS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originSecretR{
				OriginName: o,
			}
		} else {
			rel.R.OriginName = o
		}
	}
	return nil
}

// SetOriginOS removes all previously related items of the
// origin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginName's OriginOS accordingly.
// Replaces o.R.OriginOS with related.
// Sets related.R.OriginName's OriginOS accordingly.
func (o *Origin) SetOriginOS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginSecret) error {
	query := "update \"origin_secrets\" set \"origin\" = null where \"origin\" = $1"
	values := []interface{}{o.Name}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginOS {
			queries.SetScanner(&rel.Origin, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginName = nil
		}

		o.R.OriginOS = nil
	}
	return o.AddOriginOS(ctx, exec, insert, related...)
}

// RemoveOriginOS relationships from objects passed in.
// Removes related items from R.OriginOS (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginName.
func (o *Origin) RemoveOriginOS(ctx context.Context, exec boil.ContextExecutor, related ...*OriginSecret) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Origin, nil)
		if rel.R != nil {
			rel.R.OriginName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginOS {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginOS)
			if ln > 1 && i < ln-1 {
				o.R.OriginOS[i] = o.R.OriginOS[ln-1]
			}
			o.R.OriginOS = o.R.OriginOS[:ln-1]
			break
		}
	}

	return nil
}

// Origins retrieves all the records using an executor.
func Origins(mods ...qm.QueryMod) originQuery {
	mods = append(mods, qm.From("\"origins\""))
	return originQuery{NewQuery(mods...)}
}

// FindOrigin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrigin(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*Origin, error) {
	originObj := &Origin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origins\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, originObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from origins")
	}

	return originObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Origin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origins provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originInsertCacheMut.RLock()
	cache, cached := originInsertCache[key]
	originInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originColumns,
			originColumnsWithDefault,
			originColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originType, originMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originType, originMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origins\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origins\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origins")
	}

	if !cached {
		originInsertCacheMut.Lock()
		originInsertCache[key] = cache
		originInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Origin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Origin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originUpdateCacheMut.RLock()
	cache, cached := originUpdateCache[key]
	originUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originColumns,
			originPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origins\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originType, originMapping, append(wl, originPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origins")
	}

	if !cached {
		originUpdateCacheMut.Lock()
		originUpdateCache[key] = cache
		originUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in origin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all origin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Origin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origins provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originUpsertCacheMut.RLock()
	cache, cached := originUpsertCache[key]
	originUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originColumns,
			originColumnsWithDefault,
			originColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originColumns,
			originPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origins, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originPrimaryKeyColumns))
			copy(conflict, originPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"origins\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originType, originMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originType, originMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origins")
	}

	if !cached {
		originUpsertCacheMut.Lock()
		originUpsertCache[key] = cache
		originUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Origin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Origin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Origin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originPrimaryKeyMapping)
	sql := "DELETE FROM \"origins\" WHERE \"name\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origins")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Origin slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(originBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"origins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origins")
	}

	if len(originAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Origin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrigin(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origins\".* FROM \"origins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginSlice")
	}

	*o = slice

	return nil
}

// OriginExists checks if the Origin row exists.
func OriginExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origins\" where \"name\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, name)
	}

	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origins exists")
	}

	return exists, nil
}
