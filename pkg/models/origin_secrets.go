// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OriginSecret is an object representing the database table.
type OriginSecret struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID   int64       `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Value     null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Origin    null.String `boil:"origin" json:"origin,omitempty" toml:"origin" yaml:"origin,omitempty"`

	R *originSecretR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L originSecretL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginSecretColumns = struct {
	ID        string
	OwnerID   string
	Name      string
	Value     string
	CreatedAt string
	UpdatedAt string
	Origin    string
}{
	ID:        "id",
	OwnerID:   "owner_id",
	Name:      "name",
	Value:     "value",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Origin:    "origin",
}

// Generated where

var OriginSecretWhere = struct {
	ID        whereHelperint64
	OwnerID   whereHelperint64
	Name      whereHelpernull_String
	Value     whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	Origin    whereHelpernull_String
}{
	ID:        whereHelperint64{field: `id`},
	OwnerID:   whereHelperint64{field: `owner_id`},
	Name:      whereHelpernull_String{field: `name`},
	Value:     whereHelpernull_String{field: `value`},
	CreatedAt: whereHelpernull_Time{field: `created_at`},
	UpdatedAt: whereHelpernull_Time{field: `updated_at`},
	Origin:    whereHelpernull_String{field: `origin`},
}

// OriginSecretRels is where relationship names are stored.
var OriginSecretRels = struct {
	OriginName string
}{
	OriginName: "OriginName",
}

// originSecretR is where relationships are stored.
type originSecretR struct {
	OriginName *Origin
}

// NewStruct creates a new relationship struct
func (*originSecretR) NewStruct() *originSecretR {
	return &originSecretR{}
}

// originSecretL is where Load methods for each relationship are stored.
type originSecretL struct{}

var (
	originSecretColumns               = []string{"id", "owner_id", "name", "value", "created_at", "updated_at", "origin"}
	originSecretColumnsWithoutDefault = []string{"owner_id", "name", "value", "origin"}
	originSecretColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	originSecretPrimaryKeyColumns     = []string{"id"}
)

type (
	// OriginSecretSlice is an alias for a slice of pointers to OriginSecret.
	// This should generally be used opposed to []OriginSecret.
	OriginSecretSlice []*OriginSecret
	// OriginSecretHook is the signature for custom OriginSecret hook methods
	OriginSecretHook func(context.Context, boil.ContextExecutor, *OriginSecret) error

	originSecretQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originSecretType                 = reflect.TypeOf(&OriginSecret{})
	originSecretMapping              = queries.MakeStructMapping(originSecretType)
	originSecretPrimaryKeyMapping, _ = queries.BindMapping(originSecretType, originSecretMapping, originSecretPrimaryKeyColumns)
	originSecretInsertCacheMut       sync.RWMutex
	originSecretInsertCache          = make(map[string]insertCache)
	originSecretUpdateCacheMut       sync.RWMutex
	originSecretUpdateCache          = make(map[string]updateCache)
	originSecretUpsertCacheMut       sync.RWMutex
	originSecretUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originSecretBeforeInsertHooks []OriginSecretHook
var originSecretBeforeUpdateHooks []OriginSecretHook
var originSecretBeforeDeleteHooks []OriginSecretHook
var originSecretBeforeUpsertHooks []OriginSecretHook

var originSecretAfterInsertHooks []OriginSecretHook
var originSecretAfterSelectHooks []OriginSecretHook
var originSecretAfterUpdateHooks []OriginSecretHook
var originSecretAfterDeleteHooks []OriginSecretHook
var originSecretAfterUpsertHooks []OriginSecretHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OriginSecret) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OriginSecret) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OriginSecret) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OriginSecret) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OriginSecret) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OriginSecret) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OriginSecret) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OriginSecret) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OriginSecret) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originSecretAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginSecretHook registers your hook function for all future operations.
func AddOriginSecretHook(hookPoint boil.HookPoint, originSecretHook OriginSecretHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		originSecretBeforeInsertHooks = append(originSecretBeforeInsertHooks, originSecretHook)
	case boil.BeforeUpdateHook:
		originSecretBeforeUpdateHooks = append(originSecretBeforeUpdateHooks, originSecretHook)
	case boil.BeforeDeleteHook:
		originSecretBeforeDeleteHooks = append(originSecretBeforeDeleteHooks, originSecretHook)
	case boil.BeforeUpsertHook:
		originSecretBeforeUpsertHooks = append(originSecretBeforeUpsertHooks, originSecretHook)
	case boil.AfterInsertHook:
		originSecretAfterInsertHooks = append(originSecretAfterInsertHooks, originSecretHook)
	case boil.AfterSelectHook:
		originSecretAfterSelectHooks = append(originSecretAfterSelectHooks, originSecretHook)
	case boil.AfterUpdateHook:
		originSecretAfterUpdateHooks = append(originSecretAfterUpdateHooks, originSecretHook)
	case boil.AfterDeleteHook:
		originSecretAfterDeleteHooks = append(originSecretAfterDeleteHooks, originSecretHook)
	case boil.AfterUpsertHook:
		originSecretAfterUpsertHooks = append(originSecretAfterUpsertHooks, originSecretHook)
	}
}

// One returns a single originSecret record from the query.
func (q originSecretQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OriginSecret, error) {
	o := &OriginSecret{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for origin_secrets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OriginSecret records from the query.
func (q originSecretQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginSecretSlice, error) {
	var o []*OriginSecret

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OriginSecret slice")
	}

	if len(originSecretAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OriginSecret records in the query.
func (q originSecretQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origin_secrets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originSecretQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origin_secrets exists")
	}

	return count > 0, nil
}

// OriginName pointed to by the foreign key.
func (o *OriginSecret) OriginName(mods ...qm.QueryMod) originQuery {
	queryMods := []qm.QueryMod{
		qm.Where("name=?", o.Origin),
	}

	queryMods = append(queryMods, mods...)

	query := Origins(queryMods...)
	queries.SetFrom(query.Query, "\"origins\"")

	return query
}

// LoadOriginName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originSecretL) LoadOriginName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginSecret interface{}, mods queries.Applicator) error {
	var slice []*OriginSecret
	var object *OriginSecret

	if singular {
		object = maybeOriginSecret.(*OriginSecret)
	} else {
		slice = *maybeOriginSecret.(*[]*OriginSecret)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originSecretR{}
		}
		if !queries.IsNil(object.Origin) {
			args = append(args, object.Origin)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originSecretR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Origin) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Origin) {
				args = append(args, obj.Origin)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origins`), qm.WhereIn(`name in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Origin")
	}

	var resultSlice []*Origin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Origin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origins")
	}

	if len(originSecretAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OriginName = foreign
		if foreign.R == nil {
			foreign.R = &originR{}
		}
		foreign.R.OriginOS = append(foreign.R.OriginOS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Origin, foreign.Name) {
				local.R.OriginName = foreign
				if foreign.R == nil {
					foreign.R = &originR{}
				}
				foreign.R.OriginOS = append(foreign.R.OriginOS, local)
				break
			}
		}
	}

	return nil
}

// SetOriginName of the originSecret to the related item.
// Sets o.R.OriginName to related.
// Adds o to related.R.OriginOS.
func (o *OriginSecret) SetOriginName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Origin) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"origin"}),
		strmangle.WhereClause("\"", "\"", 2, originSecretPrimaryKeyColumns),
	)
	values := []interface{}{related.Name, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Origin, related.Name)
	if o.R == nil {
		o.R = &originSecretR{
			OriginName: related,
		}
	} else {
		o.R.OriginName = related
	}

	if related.R == nil {
		related.R = &originR{
			OriginOS: OriginSecretSlice{o},
		}
	} else {
		related.R.OriginOS = append(related.R.OriginOS, o)
	}

	return nil
}

// RemoveOriginName relationship.
// Sets o.R.OriginName to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OriginSecret) RemoveOriginName(ctx context.Context, exec boil.ContextExecutor, related *Origin) error {
	var err error

	queries.SetScanner(&o.Origin, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("origin")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.OriginName = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OriginOS {
		if queries.Equal(o.Origin, ri.Origin) {
			continue
		}

		ln := len(related.R.OriginOS)
		if ln > 1 && i < ln-1 {
			related.R.OriginOS[i] = related.R.OriginOS[ln-1]
		}
		related.R.OriginOS = related.R.OriginOS[:ln-1]
		break
	}
	return nil
}

// OriginSecrets retrieves all the records using an executor.
func OriginSecrets(mods ...qm.QueryMod) originSecretQuery {
	mods = append(mods, qm.From("\"origin_secrets\""))
	return originSecretQuery{NewQuery(mods...)}
}

// FindOriginSecret retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOriginSecret(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OriginSecret, error) {
	originSecretObj := &OriginSecret{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origin_secrets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, originSecretObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from origin_secrets")
	}

	return originSecretObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OriginSecret) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_secrets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originSecretColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originSecretInsertCacheMut.RLock()
	cache, cached := originSecretInsertCache[key]
	originSecretInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originSecretColumns,
			originSecretColumnsWithDefault,
			originSecretColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originSecretType, originSecretMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originSecretType, originSecretMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origin_secrets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origin_secrets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origin_secrets")
	}

	if !cached {
		originSecretInsertCacheMut.Lock()
		originSecretInsertCache[key] = cache
		originSecretInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OriginSecret.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OriginSecret) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originSecretUpdateCacheMut.RLock()
	cache, cached := originSecretUpdateCache[key]
	originSecretUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originSecretColumns,
			originSecretPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origin_secrets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origin_secrets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originSecretPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originSecretType, originSecretMapping, append(wl, originSecretPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origin_secrets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origin_secrets")
	}

	if !cached {
		originSecretUpdateCacheMut.Lock()
		originSecretUpdateCache[key] = cache
		originSecretUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originSecretQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origin_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origin_secrets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginSecretSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origin_secrets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originSecretPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in originSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all originSecret")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OriginSecret) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_secrets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originSecretColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originSecretUpsertCacheMut.RLock()
	cache, cached := originSecretUpsertCache[key]
	originSecretUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originSecretColumns,
			originSecretColumnsWithDefault,
			originSecretColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originSecretColumns,
			originSecretPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origin_secrets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originSecretPrimaryKeyColumns))
			copy(conflict, originSecretPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"origin_secrets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originSecretType, originSecretMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originSecretType, originSecretMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origin_secrets")
	}

	if !cached {
		originSecretUpsertCacheMut.Lock()
		originSecretUpsertCache[key] = cache
		originSecretUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OriginSecret record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OriginSecret) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginSecret provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originSecretPrimaryKeyMapping)
	sql := "DELETE FROM \"origin_secrets\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origin_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origin_secrets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originSecretQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originSecretQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin_secrets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_secrets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginSecretSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginSecret slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(originSecretBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"origin_secrets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originSecretPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from originSecret slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_secrets")
	}

	if len(originSecretAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OriginSecret) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOriginSecret(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginSecretSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginSecretSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originSecretPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origin_secrets\".* FROM \"origin_secrets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originSecretPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginSecretSlice")
	}

	*o = slice

	return nil
}

// OriginSecretExists checks if the OriginSecret row exists.
func OriginSecretExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origin_secrets\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origin_secrets exists")
	}

	return exists, nil
}
