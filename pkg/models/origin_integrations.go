// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OriginIntegration is an object representing the database table.
type OriginIntegration struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OriginName  null.String `boil:"origin_name" json:"origin_name,omitempty" toml:"origin_name" yaml:"origin_name,omitempty"`
	Integration null.String `boil:"integration" json:"integration,omitempty" toml:"integration" yaml:"integration,omitempty"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Body        null.String `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *originIntegrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L originIntegrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginIntegrationColumns = struct {
	ID          string
	OriginName  string
	Integration string
	Name        string
	Body        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	OriginName:  "origin_name",
	Integration: "integration",
	Name:        "name",
	Body:        "body",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// Generated where

var OriginIntegrationWhere = struct {
	ID          whereHelperint64
	OriginName  whereHelpernull_String
	Integration whereHelpernull_String
	Name        whereHelpernull_String
	Body        whereHelpernull_String
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint64{field: `id`},
	OriginName:  whereHelpernull_String{field: `origin_name`},
	Integration: whereHelpernull_String{field: `integration`},
	Name:        whereHelpernull_String{field: `name`},
	Body:        whereHelpernull_String{field: `body`},
	CreatedAt:   whereHelpernull_Time{field: `created_at`},
	UpdatedAt:   whereHelpernull_Time{field: `updated_at`},
}

// OriginIntegrationRels is where relationship names are stored.
var OriginIntegrationRels = struct {
	IntegrationOriginProjectIntegrations string
}{
	IntegrationOriginProjectIntegrations: "IntegrationOriginProjectIntegrations",
}

// originIntegrationR is where relationships are stored.
type originIntegrationR struct {
	IntegrationOriginProjectIntegrations OriginProjectIntegrationSlice
}

// NewStruct creates a new relationship struct
func (*originIntegrationR) NewStruct() *originIntegrationR {
	return &originIntegrationR{}
}

// originIntegrationL is where Load methods for each relationship are stored.
type originIntegrationL struct{}

var (
	originIntegrationColumns               = []string{"id", "origin_name", "integration", "name", "body", "created_at", "updated_at"}
	originIntegrationColumnsWithoutDefault = []string{"origin_name", "integration", "name", "body"}
	originIntegrationColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	originIntegrationPrimaryKeyColumns     = []string{"id"}
)

type (
	// OriginIntegrationSlice is an alias for a slice of pointers to OriginIntegration.
	// This should generally be used opposed to []OriginIntegration.
	OriginIntegrationSlice []*OriginIntegration
	// OriginIntegrationHook is the signature for custom OriginIntegration hook methods
	OriginIntegrationHook func(context.Context, boil.ContextExecutor, *OriginIntegration) error

	originIntegrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originIntegrationType                 = reflect.TypeOf(&OriginIntegration{})
	originIntegrationMapping              = queries.MakeStructMapping(originIntegrationType)
	originIntegrationPrimaryKeyMapping, _ = queries.BindMapping(originIntegrationType, originIntegrationMapping, originIntegrationPrimaryKeyColumns)
	originIntegrationInsertCacheMut       sync.RWMutex
	originIntegrationInsertCache          = make(map[string]insertCache)
	originIntegrationUpdateCacheMut       sync.RWMutex
	originIntegrationUpdateCache          = make(map[string]updateCache)
	originIntegrationUpsertCacheMut       sync.RWMutex
	originIntegrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originIntegrationBeforeInsertHooks []OriginIntegrationHook
var originIntegrationBeforeUpdateHooks []OriginIntegrationHook
var originIntegrationBeforeDeleteHooks []OriginIntegrationHook
var originIntegrationBeforeUpsertHooks []OriginIntegrationHook

var originIntegrationAfterInsertHooks []OriginIntegrationHook
var originIntegrationAfterSelectHooks []OriginIntegrationHook
var originIntegrationAfterUpdateHooks []OriginIntegrationHook
var originIntegrationAfterDeleteHooks []OriginIntegrationHook
var originIntegrationAfterUpsertHooks []OriginIntegrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OriginIntegration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OriginIntegration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OriginIntegration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OriginIntegration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OriginIntegration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OriginIntegration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OriginIntegration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OriginIntegration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OriginIntegration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originIntegrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginIntegrationHook registers your hook function for all future operations.
func AddOriginIntegrationHook(hookPoint boil.HookPoint, originIntegrationHook OriginIntegrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		originIntegrationBeforeInsertHooks = append(originIntegrationBeforeInsertHooks, originIntegrationHook)
	case boil.BeforeUpdateHook:
		originIntegrationBeforeUpdateHooks = append(originIntegrationBeforeUpdateHooks, originIntegrationHook)
	case boil.BeforeDeleteHook:
		originIntegrationBeforeDeleteHooks = append(originIntegrationBeforeDeleteHooks, originIntegrationHook)
	case boil.BeforeUpsertHook:
		originIntegrationBeforeUpsertHooks = append(originIntegrationBeforeUpsertHooks, originIntegrationHook)
	case boil.AfterInsertHook:
		originIntegrationAfterInsertHooks = append(originIntegrationAfterInsertHooks, originIntegrationHook)
	case boil.AfterSelectHook:
		originIntegrationAfterSelectHooks = append(originIntegrationAfterSelectHooks, originIntegrationHook)
	case boil.AfterUpdateHook:
		originIntegrationAfterUpdateHooks = append(originIntegrationAfterUpdateHooks, originIntegrationHook)
	case boil.AfterDeleteHook:
		originIntegrationAfterDeleteHooks = append(originIntegrationAfterDeleteHooks, originIntegrationHook)
	case boil.AfterUpsertHook:
		originIntegrationAfterUpsertHooks = append(originIntegrationAfterUpsertHooks, originIntegrationHook)
	}
}

// One returns a single originIntegration record from the query.
func (q originIntegrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OriginIntegration, error) {
	o := &OriginIntegration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for origin_integrations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OriginIntegration records from the query.
func (q originIntegrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginIntegrationSlice, error) {
	var o []*OriginIntegration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OriginIntegration slice")
	}

	if len(originIntegrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OriginIntegration records in the query.
func (q originIntegrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origin_integrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originIntegrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origin_integrations exists")
	}

	return count > 0, nil
}

// IntegrationOriginProjectIntegrations retrieves all the origin_project_integration's OriginProjectIntegrations with an executor via integration_id column.
func (o *OriginIntegration) IntegrationOriginProjectIntegrations(mods ...qm.QueryMod) originProjectIntegrationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"origin_project_integrations\".\"integration_id\"=?", o.ID),
	)

	query := OriginProjectIntegrations(queryMods...)
	queries.SetFrom(query.Query, "\"origin_project_integrations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"origin_project_integrations\".*"})
	}

	return query
}

// LoadIntegrationOriginProjectIntegrations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (originIntegrationL) LoadIntegrationOriginProjectIntegrations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginIntegration interface{}, mods queries.Applicator) error {
	var slice []*OriginIntegration
	var object *OriginIntegration

	if singular {
		object = maybeOriginIntegration.(*OriginIntegration)
	} else {
		slice = *maybeOriginIntegration.(*[]*OriginIntegration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originIntegrationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originIntegrationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`origin_project_integrations`), qm.WhereIn(`integration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load origin_project_integrations")
	}

	var resultSlice []*OriginProjectIntegration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice origin_project_integrations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on origin_project_integrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origin_project_integrations")
	}

	if len(originProjectIntegrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IntegrationOriginProjectIntegrations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &originProjectIntegrationR{}
			}
			foreign.R.Integration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IntegrationID {
				local.R.IntegrationOriginProjectIntegrations = append(local.R.IntegrationOriginProjectIntegrations, foreign)
				if foreign.R == nil {
					foreign.R = &originProjectIntegrationR{}
				}
				foreign.R.Integration = local
				break
			}
		}
	}

	return nil
}

// AddIntegrationOriginProjectIntegrations adds the given related objects to the existing relationships
// of the origin_integration, optionally inserting them as new records.
// Appends related to o.R.IntegrationOriginProjectIntegrations.
// Sets related.R.Integration appropriately.
func (o *OriginIntegration) AddIntegrationOriginProjectIntegrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OriginProjectIntegration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IntegrationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"origin_project_integrations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"integration_id"}),
				strmangle.WhereClause("\"", "\"", 2, originProjectIntegrationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IntegrationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &originIntegrationR{
			IntegrationOriginProjectIntegrations: related,
		}
	} else {
		o.R.IntegrationOriginProjectIntegrations = append(o.R.IntegrationOriginProjectIntegrations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &originProjectIntegrationR{
				Integration: o,
			}
		} else {
			rel.R.Integration = o
		}
	}
	return nil
}

// OriginIntegrations retrieves all the records using an executor.
func OriginIntegrations(mods ...qm.QueryMod) originIntegrationQuery {
	mods = append(mods, qm.From("\"origin_integrations\""))
	return originIntegrationQuery{NewQuery(mods...)}
}

// FindOriginIntegration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOriginIntegration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OriginIntegration, error) {
	originIntegrationObj := &OriginIntegration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origin_integrations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, originIntegrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from origin_integrations")
	}

	return originIntegrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OriginIntegration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_integrations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originIntegrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originIntegrationInsertCacheMut.RLock()
	cache, cached := originIntegrationInsertCache[key]
	originIntegrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originIntegrationColumns,
			originIntegrationColumnsWithDefault,
			originIntegrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originIntegrationType, originIntegrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originIntegrationType, originIntegrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origin_integrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origin_integrations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origin_integrations")
	}

	if !cached {
		originIntegrationInsertCacheMut.Lock()
		originIntegrationInsertCache[key] = cache
		originIntegrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OriginIntegration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OriginIntegration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originIntegrationUpdateCacheMut.RLock()
	cache, cached := originIntegrationUpdateCache[key]
	originIntegrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originIntegrationColumns,
			originIntegrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origin_integrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origin_integrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originIntegrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originIntegrationType, originIntegrationMapping, append(wl, originIntegrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origin_integrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origin_integrations")
	}

	if !cached {
		originIntegrationUpdateCacheMut.Lock()
		originIntegrationUpdateCache[key] = cache
		originIntegrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originIntegrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origin_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origin_integrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginIntegrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origin_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originIntegrationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in originIntegration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all originIntegration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OriginIntegration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_integrations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originIntegrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originIntegrationUpsertCacheMut.RLock()
	cache, cached := originIntegrationUpsertCache[key]
	originIntegrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originIntegrationColumns,
			originIntegrationColumnsWithDefault,
			originIntegrationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originIntegrationColumns,
			originIntegrationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origin_integrations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originIntegrationPrimaryKeyColumns))
			copy(conflict, originIntegrationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"origin_integrations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originIntegrationType, originIntegrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originIntegrationType, originIntegrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origin_integrations")
	}

	if !cached {
		originIntegrationUpsertCacheMut.Lock()
		originIntegrationUpsertCache[key] = cache
		originIntegrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OriginIntegration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OriginIntegration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginIntegration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originIntegrationPrimaryKeyMapping)
	sql := "DELETE FROM \"origin_integrations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origin_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origin_integrations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originIntegrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originIntegrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_integrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginIntegrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginIntegration slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(originIntegrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"origin_integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originIntegrationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from originIntegration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_integrations")
	}

	if len(originIntegrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OriginIntegration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOriginIntegration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginIntegrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginIntegrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origin_integrations\".* FROM \"origin_integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originIntegrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginIntegrationSlice")
	}

	*o = slice

	return nil
}

// OriginIntegrationExists checks if the OriginIntegration row exists.
func OriginIntegrationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origin_integrations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origin_integrations exists")
	}

	return exists, nil
}
