// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOriginChannels(t *testing.T) {
	t.Parallel()

	query := OriginChannels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOriginChannelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginChannelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OriginChannels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginChannelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginChannelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOriginChannelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OriginChannelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OriginChannel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OriginChannelExists to return true, but got false.")
	}
}

func testOriginChannelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	originChannelFound, err := FindOriginChannel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if originChannelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOriginChannelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OriginChannels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOriginChannelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OriginChannels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOriginChannelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	originChannelOne := &OriginChannel{}
	originChannelTwo := &OriginChannel{}
	if err = randomize.Struct(seed, originChannelOne, originChannelDBTypes, false, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}
	if err = randomize.Struct(seed, originChannelTwo, originChannelDBTypes, false, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originChannelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originChannelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginChannels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOriginChannelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	originChannelOne := &OriginChannel{}
	originChannelTwo := &OriginChannel{}
	if err = randomize.Struct(seed, originChannelOne, originChannelDBTypes, false, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}
	if err = randomize.Struct(seed, originChannelTwo, originChannelDBTypes, false, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = originChannelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = originChannelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func originChannelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func originChannelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OriginChannel) error {
	*o = OriginChannel{}
	return nil
}

func testOriginChannelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OriginChannel{}
	o := &OriginChannel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, originChannelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OriginChannel object: %s", err)
	}

	AddOriginChannelHook(boil.BeforeInsertHook, originChannelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	originChannelBeforeInsertHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.AfterInsertHook, originChannelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	originChannelAfterInsertHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.AfterSelectHook, originChannelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	originChannelAfterSelectHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.BeforeUpdateHook, originChannelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	originChannelBeforeUpdateHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.AfterUpdateHook, originChannelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	originChannelAfterUpdateHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.BeforeDeleteHook, originChannelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	originChannelBeforeDeleteHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.AfterDeleteHook, originChannelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	originChannelAfterDeleteHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.BeforeUpsertHook, originChannelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	originChannelBeforeUpsertHooks = []OriginChannelHook{}

	AddOriginChannelHook(boil.AfterUpsertHook, originChannelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	originChannelAfterUpsertHooks = []OriginChannelHook{}
}

func testOriginChannelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginChannelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(originChannelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOriginChannelToManyChannelOriginChannelPackages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginChannel
	var b, c OriginChannelPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originChannelPackageDBTypes, false, originChannelPackageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originChannelPackageDBTypes, false, originChannelPackageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChannelID = a.ID
	c.ChannelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChannelOriginChannelPackages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChannelID == b.ChannelID {
			bFound = true
		}
		if v.ChannelID == c.ChannelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OriginChannelSlice{&a}
	if err = a.L.LoadChannelOriginChannelPackages(ctx, tx, false, (*[]*OriginChannel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChannelOriginChannelPackages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChannelOriginChannelPackages = nil
	if err = a.L.LoadChannelOriginChannelPackages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChannelOriginChannelPackages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOriginChannelToManyAddOpChannelOriginChannelPackages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginChannel
	var b, c, d, e OriginChannelPackage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originChannelDBTypes, false, strmangle.SetComplement(originChannelPrimaryKeyColumns, originChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OriginChannelPackage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originChannelPackageDBTypes, false, strmangle.SetComplement(originChannelPackagePrimaryKeyColumns, originChannelPackageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OriginChannelPackage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChannelOriginChannelPackages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ChannelID {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if a.ID != second.ChannelID {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChannelOriginChannelPackages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChannelOriginChannelPackages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChannelOriginChannelPackages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOriginChannelToOneOriginUsingOriginName(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OriginChannel
	var foreign Origin

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Origin struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Origin, foreign.Name)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OriginName().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Name, foreign.Name) {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	slice := OriginChannelSlice{&local}
	if err = local.L.LoadOriginName(ctx, tx, false, (*[]*OriginChannel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginName == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OriginName = nil
	if err = local.L.LoadOriginName(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginName == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOriginChannelToOneSetOpOriginUsingOriginName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginChannel
	var b, c Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originChannelDBTypes, false, strmangle.SetComplement(originChannelPrimaryKeyColumns, originChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Origin{&b, &c} {
		err = a.SetOriginName(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OriginName != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginOC[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Origin, x.Name) {
			t.Error("foreign key was wrong value", a.Origin)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Origin))
		reflect.Indirect(reflect.ValueOf(&a.Origin)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Origin, x.Name) {
			t.Error("foreign key was wrong value", a.Origin, x.Name)
		}
	}
}

func testOriginChannelToOneRemoveOpOriginUsingOriginName(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OriginChannel
	var b Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, originChannelDBTypes, false, strmangle.SetComplement(originChannelPrimaryKeyColumns, originChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOriginName(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOriginName(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OriginName().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OriginName != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Origin) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginOC) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOriginChannelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginChannelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OriginChannelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOriginChannelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OriginChannels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	originChannelDBTypes = map[string]string{`ID`: `bigint`, `OwnerID`: `bigint`, `Name`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Origin`: `text`}
	_                    = bytes.MinRead
)

func testOriginChannelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(originChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(originChannelColumns) == len(originChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOriginChannelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(originChannelColumns) == len(originChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OriginChannel{}
	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, originChannelDBTypes, true, originChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(originChannelColumns, originChannelPrimaryKeyColumns) {
		fields = originChannelColumns
	} else {
		fields = strmangle.SetComplement(
			originChannelColumns,
			originChannelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OriginChannelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOriginChannelsUpsert(t *testing.T) {
	t.Parallel()

	if len(originChannelColumns) == len(originChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OriginChannel{}
	if err = randomize.Struct(seed, &o, originChannelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginChannel: %s", err)
	}

	count, err := OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, originChannelDBTypes, false, originChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OriginChannel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OriginChannel: %s", err)
	}

	count, err = OriginChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
